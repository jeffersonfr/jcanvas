/***************************************************************************
 *   Copyright (C) 2005 by Jeff Ferr                                       *
 *   root@sat                                                              *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
/****
File: ico.h
        - Structures for holding ICO and image information.
Author: Laura Tweedy <tweedy@umr.edu>
Date: Tue Jan  5 12:11:41 CST 1999

Notes: Much of the structure information comes from
	"Encyclopedia of Graphic File Formats" from O'Reilly.  Quotes from
	that book are noted with "GFF".
       A "DIB" is a "Device Independent Bitmap".
****/
#include "include/icoimage.h"

#include <iostream>
#include <string>
#include <istream>
#include <sstream>

namespace jcanvas {

const char *GENERIC_ICO_COLOR_STRING[] = {
" .", " X", " o", " O", " +", " @", " #", " $", " %", " &", " *", " =", " -", " ;", " :", " >",
" ,", " <", " 1", " 2", " 3", " 4", " 5", " 6", " 7", " 8", " 9", " 0", " q", " w", " e", " r",
" t", " y", " u", " i", " p", " a", " s", " d", " f", " g", " h", " j", " k", " l", " z", " x",
" c", " v", " b", " n", " m", " M", " N", " B", " V", " C", " Z", " A", " S", " D", " F", " G",
" H", " J", " K", " L", " P", " I", " U", " Y", " T", " R", " E", " W", " Q", " !", " ~", " ^",
" /", " (", " )", " _", " `", " '", " ]", " [", " {", " }", " |", ". ", "..", ".X", ".o", ".O",
".+", ".@", ".#", ".$", ".%", ".&", ".*", ".=", ".-", ".;", ".:", ".>", ".,", ".<", ".1", ".2",
".3", ".4", ".5", ".6", ".7", ".8", ".9", ".0", ".q", ".w", ".e", ".r", ".t", ".y", ".u", ".i",
".p", ".a", ".s", ".d", ".f", ".g", ".h", ".j", ".k", ".l", ".z", ".x", ".c", ".v", ".b", ".n",
".m", ".M", ".N", ".B", ".V", ".C", ".Z", ".A", ".S", ".D", ".F", ".G", ".H", ".J", ".K", ".L",
".P", ".I", ".U", ".Y", ".T", ".R", ".E", ".W", ".Q", ".!", ".~", ".^", "./", ".(", ".)", "._",
".`", ".'", ".]", ".[", ".{", ".}", ".|", "X ", "X.", "XX", "Xo", "XO", "X+", "X@", "X#", "X$",
"X%", "X&", "X*", "X=", "X-", "X;", "X:", "X>", "X,", "X<", "X1", "X2", "X3", "X4", "X5", "X6",
"X7", "X8", "X9", "X0", "Xq", "Xw", "Xe", "Xr", "Xt", "Xy", "Xu", "Xi", "Xp", "Xa", "Xs", "Xd",
"Xf", "Xg", "Xh", "Xj", "Xk", "Xl", "Xz", "Xx", "Xc", "Xv", "Xb", "Xn", "Xm", "XM", "XN", "XB",
"XV", "XC", "XZ", "XA", "XS", "XD", "XF", "XG", "XH", "XJ", "XK", "XL", "XP", "XI", "XU", "XY",
"XT", "XR", "XE", "XW", "XQ", "X!", "X~", "X^", "X/", "X(", "X)", "X_", "X`", "X'", "X]", "X[",
"X{", "X}", "X|", "o ", "o.", "oX", "oo", "oO", "o+", "o@", "o#", "o$", "o%", "o&", "o*", "o=",
"o-", "o;", "o:", "o>", "o,", "o<", "o1", "o2", "o3", "o4", "o5", "o6", "o7", "o8", "o9", "o0",
"oq", "ow", "oe", "or", "ot", "oy", "ou", "oi", "op", "oa", "os", "od", "of", "og", "oh", "oj",
"ok", "ol", "oz", "ox", "oc", "ov", "ob", "on", "om", "oM", "oN", "oB", "oV", "oC", "oZ", "oA",
"oS", "oD", "oF", "oG", "oH", "oJ", "oK", "oL", "oP", "oI", "oU", "oY", "oT", "oR", "oE", "oW",
"oQ", "o!", "o~", "o^", "o/", "o(", "o)", "o_", "o`", "o'", "o]", "o[", "o{", "o}", "o|", "O ",
"O.", "OX", "Oo", "OO", "O+", "O@", "O#", "O$", "O%", "O&", "O*", "O=", "O-", "O;", "O:", "O>",
"O,", "O<", "O1", "O2", "O3", "O4", "O5", "O6", "O7", "O8", "O9", "O0", "Oq", "Ow", "Oe", "Or",
"Ot", "Oy", "Ou", "Oi", "Op", "Oa", "Os", "Od", "Of", "Og", "Oh", "Oj", "Ok", "Ol", "Oz", "Ox",
"Oc", "Ov", "Ob", "On", "Om", "OM", "ON", "OB", "OV", "OC", "OZ", "OA", "OS", "OD", "OF", "OG",
"OH", "OJ", "1", "OL", "OP", "OI", "OU", "OY", "OT", "OR", "OE", "OW", "OQ", "O!", "O~", "O^",
"O/", "O(", "O)", "O_", "O`", "O'", "O]", "O[", "O{", "O}", "O|", "+ ", "+.", "+X", "+o", "+O",
"++", "+@", "+#", "+$", "+%", "+&", "+*", "+=", "+-", "+;", "+:", "+>", "+,", "+<", "+1", "+2",
"+3", "+4", "+5", "+6", "+7", "+8", "+9", "+0", "+q", "+w", "+e", "+r", "+t", "+y", "+u", "+i",
"+p", "+a", "+s", "+d", "+f", "+g", "+h", "+j", "+k", "+l", "+z", "+x", "+c", "+v", "+b", "+n",
"+m", "+M", "+N", "+B", "+V", "+C", "+Z", "+A", "+S", "+D", "+F", "+G", "+H", "+J", "+K", "+L",
"+P", "+I", "+U", "+Y", "+T", "+R", "+E", "+W", "+Q", "+!", "+~", "+^", "+/", "+(", "+)", "+_",
"+`", "+'", "+]", "+[", "+{", "+}", "+|", "@ ", "@.", "@X", "@o", "@O", "@+", "@@", "@#", "@$",
"@%", "@&", "@*", "@=", "@-", "@;", "@:", "@>", "@,", "@<", "@1", "@2", "@3", "@4", "@5", "@6",
"@7", "@8", "@9", "@0", "@q", "@w", "@e", "@r", "@t", "@y", "@u", "@i", "@p", "@a", "@s", "@d",
"@f", "@g", "@h", "@j", "@k", "@l", "@z", "@x", "@c", "@v", "@b", "@n", "@m", "@M", "@N", "@B",
"@V", "@C", "@Z", "@A", "@S", "@D", "@F", "@G", "@H", "@J", "@K", "@L", "@P", "@I", "@U", "@Y",
"@T", "@R", "@E", "@W", "@Q", "@!", "@~", "@^", "@/", "@(", "@)", "@_", "@`", "@'", "@]", "@[",
"@{", "@}", "@|", "# ", "#.", "#X", "#o", "#O", "#+", "#@", "##", "#$", "#%", "#&", "#*", "#=",
"#-", "#;", "#:", "#>", "#,", "#<", "#1", "#2", "#3", "#4", "#5", "#6", "#7", "#8", "#9", "#0",
"#q", "#w", "#e", "#r", "#t", "#y", "#u", "#i", "#p", "#a", "#s", "#d", "#f", "#g", "#h", "#j",
"#k", "#l", "#z", "#x", "#c", "#v", "#b", "#n", "#m", "#M", "#N", "#B", "#V", "#C", "#Z", "#A",
"#S", "#D", "#F", "#G", "#H", "#J", "#K", "#L", "#P", "#I", "#U", "#Y", "#T", "#R", "#E", "#W",
"#Q", "#!", "#~", "#^", "#/", "#(", "#)", "#_", "#`", "#'", "#]", "#[", "#{", "#}", "#|", "$ ",
"$.", "$X", "$o", "$O", "$+", "$@", "$#", "$$", "$%", "$&", "$*", "$=", "$-", "$;", "$:", "$>",
"$,", "$<", "$1", "$2", "$3", "$4", "$5", "$6", "$7", "$8", "$9", "$0", "$q", "$w", "$e", "$r",
"$t", "$y", "$u", "$i", "$p", "$a", "$s", "$d", "$f", "$g", "$h", "$j", "$k", "$l", "$z", "$x",
"$c", "$v", "$b", "$n", "$m", "$M", "$N", "$B", "$V", "$C", "$Z", "$A", "$S", "$D", "$F", "$G",
"$H", "$J", "$K", "$L", "$P", "$I", "$U", "$Y", "$T", "$R", "$E", "$W", "$Q", "$!", "$~", "$^", 
"$/", "$(", "$)", "$_", "$`", "$'", "$]", "$[", "${", "$}", "$|", "% ", "%.", "%X", "%o", "%O", 
"%+", "%@", "%#", "%$", "%%", "%&", "%*", "%=", "%-", "%;", "%:", "%>", "%,", "%<", "%1", "%2",
"%3", "%4", "%5", "%6", "%7", "%8", "%9", "%0", "%q", "%w", "%e", "%r", "%t", "%y", "%u", "%i", 
"%p", "%a", "%s", "%d", "%f", "%g", "%h", "%j", "%k", "%l", "%z", "%x", "%c", "%v", "%b", "%n",
"%m", "%M", "%N", "%B", "%V", "%C", "%Z", "%A", "%S", "%D", "%F", "%G", "%H", "%J", "%K", "%L",
"%P", "%I", "%U", "%Y", "%T", "%R", "%E", "%W", "%Q", "%!", "%~", "%^", "%/", "%(", "%)", "%_",
"%`", "%'", "%]", "%[", "%{", "%}", "%|", "& ", "&.", "&X", "&o", "&O", "&+", "&@", "&#", "&$",
"&%", "&&", "&*", "&=", "&-", "&;", "&:", "&>", "&,", "&<", "&1", "&2", "&3", "&4", "&5", "&6",
"&7", "&8", "&9", "&0", "&q", "&w", "&e", "&r", "&t", "&y", "&u", "&i", "&p", "&a", "&s", "&d",
"&f", "&g", "&h", "&j", "&k", "&l", "&z", "&x", "&c", "&v", "&b", "&n", "&m", "&M", "&N", "&B",
"&V", "&C", "&Z", "&A", "&S", "&D", "&F", "&G", "&H", "&J", "&K", "&L", "&P", "&I", "&U", "&Y",
"&T", "&R", "&E", "&W", "&Q", "&!", "&~", "&^", "&/", "&(", "&)", "&_", "&`", "&'", "&]", "&[",
"&{", "&}", "&|", "* ", "*.", "*X", "*o", "*O", "*+", "*@", "*#", "*$", "*%", "*&", "**", "*=",
"*-", "*;", "*:", "*>", "*,", "*<", "*1", "*2", "*3", "*4", "*5", "*6", "*7", "*8", "*9", "*0",
"*q", "*w", "*e", "*r", "*t", "*y", "*u", "*i", "*p", "*a", "*s", "*d", "*f", "*g", "*h", "*j",
"*k", "*l", "*z", "*x", "*c", "*v", "*b", "*n", "*m", "*M", "*N", "*B", "*V", "*C", "*Z", "*A",
"*S", "*D", "*F", "*G", "*H", "*J", "*K", "*L", "*P", "*I", "*U", "*Y", "*T", "*R", "*E", "*W",
"*Q", "*!", "*~", "*^", "*/", "*(", "*)", "*_", "*`", "*'", "*]", "*[", "*{", "*}", "*|", "= ",
"=.", "=X", "=o", "=O", "=+", "=@", "=#", "=$", "=%", "=&", "=*", "==", "=-", "=;", "=:", "=>",
"=,", "=<", "=1", "=2", "=3", "=4", "=5", "=6", "=7", "=8", "=9", "=0", "=q", "=w", "=e", "=r",
"=t", "=y", "=u", "=i", "=p", "=a", "=s", "=d", "=f", "=g", "=h", "=j", "=k", "=l", "=z", "=x",
"=c", "=v", "=b", "=n", "=m", "=M", "=N", "=B", "=V", "=C", "=Z", "=A", "=S", "=D", "=F", "=G",
"=H", "=J", "=K", "=L", "=P", "=I", "=U", "=Y", "=T", "=R", "=E", "=W", "=Q", "=!", "=~", "=^",
"=/", "=(", "=)", "=_", "=`", "='", "=]", "=[", "={", "=}", "=|", "- ", "-.", "-X", "-o", "-O",
"-+", "-@", "-#", "-$", "-%", "-&", "-*", "-=", "--", "-;", "-:", "->", "-,", "-<", "-1", "-2",
"-3", "-4", "-5", "-6", "-7", "-8", "-9", "-0", "-q", "-w", "-e", "-r", "-t", "-y", "-u", "-i",
"-p", "-a", "-s", "-d", "-f", "-g", "-h", "-j", "-k", "-l", "-z", "-x", "-c", "-v", "-b", "-n",
"-m", "-M", "-N", "-B", "-V", "-C", "-Z", "-A", "-S", "-D", "-F", "-G", "-H", "-J", "-K", "-L",
"-P", "-I", "-U", "-Y", "-T", "-R", "-E", "-W", "-Q", "-!", "-~", "-^", "-/", "-(", "-)", "-_",
"-`", "-'", "-]", "-[", "-{", "-}", "-|", "; ", ";.", ";X", ";o", ";O", ";+", ";@", ";#", ";$",
";%", ";&", ";*", ";=", ";-", ";;", ";:", ";>", ";,", ";<", ";1", ";2", ";3", ";4", ";5", ";6",
";7", ";8", ";9", ";0", ";q", ";w", ";e", ";r", ";t", ";y", ";u", ";i", ";p", ";a", ";s", ";d",
";f", ";g", ";h", ";j", ";k", ";l", ";z", ";x", ";c", ";v", ";b", ";n", ";m", ";M", ";N", ";B",
";V", ";C", ";Z", ";A", ";S", ";D", ";F", ";G", ";H", ";J", ";K", ";L", ";P", ";I", ";U", ";Y",
";T", ";R", ";E", ";W", ";Q", ";!", ";~", ";^", ";/", ";(", ";)", ";_", ";`", ";'", ";]", ";[",
";{", ";}", ";|", ": ", ":.", ":X", ":o", ":O", ":+", ":@", ":#", ":$", ":%", ":&", ":*", ":=",
":-", ":;", "::", ":>", ":,", ":<", ":1", ":2", ":3", ":4", ":5", ":6", ":7", ":8", ":9", ":0",
":q", ":w", ":e", ":r", ":t", ":y", ":u", ":i", ":p", ":a", ":s", ":d", ":f", ":g", ":h", ":j",
":k", ":l", ":z", ":x", ":c", ":v", ":b", ":n", ":m", ":M", ":N", ":B", ":V", ":C", ":Z", ":A",
":S", ":D", ":F", ":G", ":H", ":J", ":K", ":L", ":P", ":I", ":U", ":Y", ":T", ":R", ":E", ":W",
":Q", ":!", ":~", ":^", ":/", ":(", ":)", ":_", ":`", ":'", ":]", ":[", ":{", ":}", ":|", "> ",
">.", ">X", ">o", ">O", ">+", ">@", ">#", ">$", ">%", ">&", ">*", ">=", ">-", ">;", ">:", ">>",
">,", "><", ">1", ">2", ">3", ">4", ">5", ">6", ">7", ">8", ">9", ">0", ">q", ">w", ">e", ">r",
">t", ">y", ">u", ">i", ">p", ">a", ">s", ">d", ">f", ">g", ">h", ">j", ">k", ">l", ">z", ">x",
">c", ">v", ">b", ">n", ">m", ">M", ">N", ">B", ">V", ">C", ">Z", ">A", ">S", ">D", ">F", ">G",
">H", ">J", ">K", ">L", ">P", ">I", ">U", ">Y", ">T", ">R", ">E", ">W", ">Q", ">!", ">~", ">^",
">/", ">(", ">)", ">_", ">`", ">'", ">]", ">[", ">{", ">}", ">|", ", ", ",.", ",X", ",o", ",O",
",+", ",@", ",#", ",$", ",%", ",&", ",*", ",=", ",-", ",;", ",:", ",>", ",,", ",<", ",1", ",2",
",3", ",4", ",5", ",6", ",7", ",8", ",9", ",0", ",q", ",w", ",e", ",r", ",t", ",y", ",u", ",i",
",p", ",a", ",s", ",d", ",f", ",g", ",h", ",j", ",k", ",l", ",z", ",x", ",c", ",v", ",b", ",n",
",m", ",M", ",N", ",B", ",V", ",C", ",Z", ",A", ",S", ",D", ",F", ",G", ",H", ",J", ",K", ",L",
",P", ",I", ",U", ",Y", ",T", ",R", ",E", ",W", ",Q", ",!", ",~", ",^", ",/", ",(", ",)", ",_",
",`", ",'", ",]", ",[", ",{", ",}", ",|", "< ", "<.", "<X", "<o", "<O", "<+", "<@", "<#", "<$",
"<%", "<&", "<*", "<=", "<-", "<;", "<:", "<>", "<,", "<<", "<1", "<2", "<3", "<4", "<5", "<6",
"<7", "<8", "<9", "<0", "<q", "<w", "<e", "<r", "<t", "<y", "<u", "<i", "<p", "<a", "<s", "<d",
"<f", "<g", "<h", "<j", "<k", "<l", "<z", "<x", "<c", "<v", "<b", "<n", "<m", "<M", "<N", "<B",
"<V", "<C", "<Z", "<A", "<S", "<D", "<F", "<G", "<H", "<J", "<K", "<L", "<P", "<I", "<U", "<Y",
"<T", "<R", "<E", "<W", "<Q", "<!", "<~", "<^", "</", "<(", "<)", "<_", "<`", "<'", "<]", "<[",
"<{", "<}", "<|", "1 ", "1.", "1X", "1o", "1O", "1+", "1@", "1#", "1$", "1%", "1&", "1*", "1=",
"1-", "1;", "1:", "1>", "1,", "1<", "11", "12", "13", "14", "15", "16", "17", "18", "19", "10",
"1q", "1w", "1e", "1r", "1t", "1y", "1u", "1i", "1p", "1a", "1s", "1d", "1f", "1g", "1h", "1j",
"1k", "1l", "1z", "1x", "1c", "1v", "1b", "1n", "1m", "1M", "1N", "1B", "1V", "1C", "1Z", "1A",
"1S", "1D", "1F", "1G", "1H", "1J", "1K", "1L", "1P", "1I", "1U", "1Y", "1T", "1R", "1E", "1W",
"1Q", "1!", "1~", "1^", "1/", "1(", "1)", "1_", "1`", "1'", "1]", "1[", "1{", "1}", "1|", "2 ",
"2.", "2X", "2o", "2O", "2+", "2@", "2#", "2$", "2%", "2&", "2*", "2=", "2-", "2;", "2:", "2>",
"2,", "2<", "21", "22", "23", "24", "25", "26", "27", "28", "29", "20", "2q", "2w", "2e", "2r",
"2t", "2y", "2u", "2i", "2p", "2a", "2s", "2d", "2f", "2g", "2h", "2j", "2k", "2l", "2z", "2x",
"2c", "2v", "2b", "2n", "2m", "2M", "2N", "2B", "2V", "2C", "2Z", "2A", "2S", "2D", "2F", "2G",
"2H", "2J", "2K", "2L", "2P", "2I", "2U", "2Y", "2T", "2R", "2E", "2W", "2Q", "2!", "2~", "2^",
"2/", "2(", "2)", "2_", "2`", "2'", "2]", "2[", "2{", "2}", "2|", "3 ", "3.", "3X", "3o", "3O",
"3+", "3@", "3#", "3$", "3%", "3&", "3*", "3=", "3-", "3;", "3:", "3>", "3,", "3<", "31", "32",
"33", "34", "35", "36", "37", "38", "39", "30", "3q", "3w", "3e", "3r", "3t", "3y", "3u", "3i",
"3p", "3a", "3s", "3d", "3f", "3g", "3h", "3j", "3k", "3l", "3z", "3x", "3c", "3v", "3b", "3n",
"3m", "3M", "3N", "3B", "3V", "3C", "3Z", "3A", "3S", "3D", "3F", "3G", "3H", "3J", "3K", "3L",
"3P", "3I", "3U", "3Y", "3T", "3R", "3E", "3W", "3Q", "3!", "3~", "3^", "3/", "3(", "3)", "3_",
"3`", "3'", "3]", "3[", "3{", "3}", "3|", "4 ", "4.", "4X", "4o", "4O", "4+", "4@", "4#", "4$",
"4%", "4&", "4*", "4=", "4-", "4;", "4:", "4>", "4,", "4<", "41", "42", "43", "44", "45", "46",
"47", "48", "49", "40", "4q", "4w", "4e", "4r", "4t", "4y", "4u", "4i", "4p", "4a", "4s", "4d",
"4f", "4g", "4h", "4j", "4k", "4l", "4z", "4x", "4c", "4v", "4b", "4n", "4m", "4M", "4N", "4B",
"4V", "4C", "4Z", "4A", "4S", "4D", "4F", "4G", "4H", "4J", "4K", "4L", "4P", "4I", "4U", "4Y",
"4T", "4R", "4E", "4W", "4Q", "4!", "4~", "4^", "4/", "4(", "4)", "4_", "4`", "4'", "4]", "4[",
"4{", "4}", "4|", "5 ", "5.", "5X", "5o", "5O", "5+", "5@", "5#", "5$", "5%", "5&", "5*", "5=",
"5-", "5;", "5:", "5>", "5,", "5<", "51", "52", "53", "54", "55", "56", "57", "58", "59", "50",
"5q", "5w", "5e", "5r", "5t", "5y", "5u", "5i", "5p", "5a", "5s", "5d", "5f", "5g", "5h", "5j",
"5k", "5l", "5z", "5x", "5c", "5v", "5b", "5n", "5m", "5M", "5N", "5B", "5V", "5C", "5Z", "5A",
"5S", "5D", "5F", "5G", "5H", "5J", "5K", "5L", "5P", "5I", "5U", "5Y", "5T", "5R", "5E", "5W",
"5Q", "5!", "5~", "5^", "5/", "5(", "5)", "5_", "5`", "5'", "5]", "5[", "5{", "5}", "5|", "6 ",
"6.", "6X", "6o", "6O", "6+", "6@", "6#", "6$", "6%", "6&", "6*", "6=", "6-", "6;", "6:", "6>",
"6,", "6<", "61", "62", "63", "64", "65", "66", "67", "68", "69", "60", "6q", "6w", "6e", "6r",
"6t", "6y", "6u", "6i", "6p", "6a", "6s", "6d", "6f", "6g", "6h", "6j", "6k", "6l", "6z", "6x",
"6c", "6v", "6b", "6n", "6m", "6M", "6N", "6B", "6V", "6C", "6Z", "6A", "6S", "6D", "6F", "6G",
"6H", "6J", "6K", "6L", "6P", "6I", "6U", "6Y", "6T", "6R", "6E", "6W", "6Q", "6!", "6~", "6^",
"6/", "6(", "6)", "6_", "6`", "6'", "6]", "6[", "6{", "6}", "6|", "7 ", "7.", "7X", "7o", "7O",
"7+", "7@", "7#", "7$", "7%", "7&", "7*", "7=", "7-", "7;", "7:", "7>", "7,", "7<", "71", "72",
"73", "74", "75", "76", "77", "78", "79", "70", "7q", "7w", "7e", "7r", "7t", "7y", "7u", "7i",
"7p", "7a", "7s", "7d", "7f", "7g", "7h", "7j", "7k", "7l", "7z", "7x", "7c", "7v", "7b", "7n",
"7m", "7M", "7N", "7B", "7V", "7C", "7Z", "7A", "7S", "7D", "7F", "7G", "7H", "7J", "7K", "7L",
"7P", "7I", "7U", "7Y", "7T", "7R", "7E", "7W", "7Q", "7!", "7~", "7^", "7/", "7(", "7)", "7_",
"7`", "7'", "7]", "7[", "7{", "7}", "7|", "8 ", "8.", "8X", "8o", "8O", "8+", "8@", "8#", "8$",
"8%", "8&", "8*", "8=", "8-", "8;", "8:", "8>", "8,", "8<", "81", "82", "83", "84", "85", "86",
"87", "88", "89", "80", "8q", "8w", "8e", "8r", "8t", "8y", "8u", "8i", "8p", "8a", "8s", "8d",
"8f", "8g", "8h", "8j", "8k", "8l", "8z", "8x", "8c", "8v", "8b", "8n", "8m", "8M", "8N", "8B",
"8V", "8C", "8Z", "8A", "8S", "8D", "8F", "8G", "8H", "8J", "8K", "8L", "8P", "8I", "8U", "8Y",
"8T", "8R", "8E", "8W", "8Q", "8!", "8~", "8^", "8/", "8(", "8)", "8_", "8`", "8'", "8]", "8[",
"8{", "8}", "8|", "9 ", "9.", "9X", "9o", "9O", "9+", "9@", "9#", "9$", "9%", "9&", "9*", "9=",
"9-", "9;", "9:", "9>", "9,", "9<", "91", "92", "93", "94", "95", "96", "97", "98", "99", "90",
"9q", "9w", "9e", "9r", "9t", "9y", "9u", "9i", "9p", "9a", "9s", "9d", "9f", "9g", "9h", "9j",
"9k", "9l", "9z", "9x", "9c", "9v", "9b", "9n", "9m", "9M", "9N", "9B", "9V", "9C", "9Z", "9A",
"9S", "9D", "9F", "9G", "9H", "9J", "9K", "9L", "9P", "9I", "9U", "9Y", "9T", "9R", "9E", "9W",
"9Q", "9!", "9~", "9^", "9/", "9(", "9)", "9_", "9`", "9'", "9]", "9[", "9{", "9}", "9|", "0 ",
"0.", "0X", "0o", "0O", "0+", "0@", "0#", "0$", "0%", "0&", "0*", "0=", "0-", "0;", "0:", "0>",
"0,", "0<", "01", "02", "03", "04", "05", "06", "07", "08", "09", "00", "0q", "0w", "0e", "0r",
"0t", "0y", "0u", "0i", "0p", "0a", "0s", "0d", "0f", "0g", "0h", "0j", "0k", "0l", "0z", "0x",
"0c", "0v", "0b", "0n", "0m", "0M", "0N", "0B", "0V", "0C", "0Z", "0A", "0S", "0D", "0F", "0G",
"0H", "0J", "0K", "0L", "0P", "0I", "0U", "0Y", "0T", "0R", "0E", "0W", "0Q", "0!", "0~", "0^",
"0/", "0(", "0)", "0_", "0`", "0'", "0]", "0[", "0{", "0}", "0|", "q ", "q.", "qX", "qo", "qO",
"q+", "q@", "q#", "q$", "q%", "q&", "q*", "q=", "q-", "q;", "q:", "q>", "q,", "q<", "q1", "q2",
"q3", "q4", "q5", "q6", "q7", "q8", "q9", "q0", "qq", "qw", "qe", "qr", "qt", "qy", "qu", "qi",
"qp", "qa", "qs", "qd", "qf", "qg", "qh", "qj", "qk", "ql", "qz", "qx", "qc", "qv", "qb", "qn",
"qm", "qM", "qN", "qB", "qV", "qC", "qZ", "qA", "qS", "qD", "qF", "qG", "qH", "qJ", "qK", "qL",
"qP", "qI", "qU", "qY", "qT", "qR", "qE", "qW", "qQ", "q!", "q~", "q^", "q/", "q(", "q)", "q_",
"q`", "q'", "q]", "q[", "q{", "q}", "q|", "w ", "w.", "wX", "wo", "wO", "w+", "w@", "w#", "w$",
"w%", "w&", "w*", "w=", "w-", "w;", "w:", "w>", "w,", "w<", "w1", "w2", "w3", "w4", "w5", "w6",
"w7", "w8", "w9", "w0", "wq", "ww", "we", "wr", "wt", "wy", "wu", "wi", "wp", "wa", "ws", "wd",
"wf", "wg", "wh", "wj", "wk", "wl", "wz", "wx", "wc", "wv", "wb", "wn", "wm", "wM", "wN", "wB",
"wV", "wC", "wZ", "wA", "wS", "wD", "wF", "wG", "wH", "wJ", "wK", "wL", "wP", "wI", "wU", "wY",
"wT", "wR", "wE", "wW", "wQ", "w!", "w~", "w^", "w/", "w(", "w)", "w_", "w`", "w'", "w]", "w[",
"w{", "w}", "w|", "e ", "e.", "eX", "eo", "eO", "e+", "e@", "e#", "e$", "e%", "e&", "e*", "e=",
"e-", "e;", "e:", "e>", "e,", "e<", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "e0",
"eq", "ew", "ee", "er", "et", "ey", "eu", "ei", "ep", "ea", "es", "ed", "ef", "eg", "eh", "ej",
"ek", "el", "ez", "ex", "ec", "ev", "eb", "en", "em", "eM", "eN", "eB", "eV", "eC", "eZ", "eA",
"eS", "eD", "eF", "eG", "eH", "eJ", "eK", "eL", "eP", "eI", "eU", "eY", "eT", "eR", "eE", "eW",
"eQ", "e!", "e~", "e^", "e/", "e(", "e)", "e_", "e`", "e'", "e]", "e[", "e{", "e}", "e|", "r ",
"r.", "rX", "ro", "rO", "r+", "r@", "r#", "r$", "r%", "r&", "r*", "r=", "r-", "r;", "r:", "r>",
"r,", "r<", "r1", "r2", "r3", "r4", "r5", "r6", "r7", "r8", "r9", "r0", "rq", "rw", "re", "rr",
"rt", "ry", "ru", "ri", "rp", "ra", "rs", "rd", "rf", "rg", "rh", "rj", "rk", "rl", "rz", "rx",
"rc", "rv", "rb", "rn", "rm", "rM", "rN", "rB", "rV", "rC", "rZ", "rA", "rS", "rD", "rF", "rG",
"rH", "rJ", "rK", "rL", "rP", "rI", "rU", "rY", "rT", "rR", "rE", "rW", "rQ", "r!", "r~", "r^",
"r/", "r(", "r)", "r_", "r`", "r'", "r]", "r[", "r{", "r}", "r|", "t ", "t.", "tX", "to", "tO",
"t+", "t@", "t#", "t$", "t%", "t&", "t*", "t=", "t-", "t;", "t:", "t>", "t,", "t<", "t1", "t2",
"t3", "t4", "t5", "t6", "t7", "t8", "t9", "t0", "tq", "tw", "te", "tr", "tt", "ty", "tu", "ti",
"tp", "ta", "ts", "td", "tf", "tg", "th", "tj", "tk", "tl", "tz", "tx", "tc", "tv", "tb", "tn",
"tm", "tM", "tN", "tB", "tV", "tC", "tZ", "tA", "tS", "tD", "tF", "tG", "tH", "tJ", "tK", "tL",
"tP", "tI", "tU", "tY", "tT", "tR", "tE", "tW", "tQ", "t!", "t~", "t^", "t/", "t(", "t)", "t_",
"t`", "t'", "t]", "t[", "t{", "t}", "t|", "y ", "y.", "yX", "yo", "yO", "y+", "y@", "y#", "y$",
"y%", "y&", "y*", "y=", "y-", "y;", "y:", "y>", "y,", "y<", "y1", "y2", "y3", "y4", "y5", "y6",
"y7", "y8", "y9", "y0", "yq", "yw", "ye", "yr", "yt", "yy", "yu", "yi", "yp", "ya", "ys", "yd",
"yf", "yg", "yh", "yj", "yk", "yl", "yz", "yx", "yc", "yv", "yb", "yn", "ym", "yM", "yN", "yB",
"yV", "yC", "yZ", "yA", "yS", "yD", "yF", "yG", "yH", "yJ", "yK", "yL", "yP", "yI", "yU", "yY",
"yT", "yR", "yE", "yW", "yQ", "y!", "y~", "y^", "y/", "y(", "y)", "y_", "y`", "y'", "y]", "y[",
"y{", "y}", "y|", "u ", "u.", "uX", "uo", "uO", "u+", "u@", "u#", "u$", "u%", "u&", "u*", "u=",
"u-", "u;", "u:", "u>", "u,", "u<", "u1", "u2", "u3", "u4", "u5", "u6", "u7", "u8", "u9", "u0",
"uq", "uw", "ue", "ur", "ut", "uy", "uu", "ui", "up", "ua", "us", "ud", "uf", "ug", "uh", "uj",
"uk", "ul", "uz", "ux", "uc", "uv", "ub", "un", "um", "uM", "uN", "uB", "uV", "uC", "uZ", "uA",
"uS", "uD", "uF", "uG", "uH", "uJ", "uK", "uL", "uP", "uI", "uU", "uY", "uT", "uR", "uE", "uW",
"uQ", "u!", "u~", "u^", "u/", "u(", "u)", "u_", "u`", "u'", "u]", "u[", "u{", "u}", "u|", "i ",
"i.", "iX", "io", "iO", "i+", "i@", "i#", "i$", "i%", "i&", "i*", "i=", "i-", "i;", "i:", "i>",
"i,", "i<", "i1", "i2", "i3", "i4", "i5", "i6", "i7", "i8", "i9", "i0", "iq", "iw", "ie", "ir",
"it", "iy", "iu", "ii", "ip", "ia", "is", "id", "if", "ig", "ih", "ij", "ik", "il", "iz", "ix",
"ic", "iv", "ib", "in", "im", "iM", "iN", "iB", "iV", "iC", "iZ", "iA", "iS", "iD", "iF", "iG",
"iH", "iJ", "iK", "iL", "iP", "iI", "iU", "iY", "iT", "iR", "iE", "iW", "iQ", "i!", "i~", "i^",
"i/", "i(", "i)", "i_", "i`", "i'", "i]", "i[", "i{", "i}", "i|", "p ", "p.", "pX", "po", "pO",
"p+", "p@", "p#", "p$", "p%", "p&", "p*", "p=", "p-", "p;", "p:", "p>", "p,", "p<", "p1", "p2",
"p3", "p4", "p5", "p6", "p7", "p8", "p9", "p0", "pq", "pw", "pe", "pr", "pt", "py", "pu", "pi",
"pp", "pa", "ps", "pd", "pf", "pg", "ph", "pj", "pk", "pl", "pz", "px", "pc", "pv", "pb", "pn",
"pm", "pM", "pN", "pB", "pV", "pC", "pZ", "pA", "pS", "pD", "pF", "pG", "pH", "pJ", "pK", "pL",
"pP", "pI", "pU", "pY", "pT", "pR", "pE", "pW", "pQ", "p!", "p~", "p^", "p/", "p(", "p)", "p_",
"p`", "p'", "p]", "p[", "p{", "p}", "p|", "a ", "a.", "aX", "ao", "aO", "a+", "a@", "a#", "a$",
"a%", "a&", "a*", "a=", "a-", "a;", "a:", "a>", "a,", "a<", "a1", "a2", "a3", "a4", "a5", "a6",
"a7", "a8", "a9", "a0", "aq", "aw", "ae", "ar", "at", "ay", "au", "ai", "ap", "aa", "as", "ad",
"af", "ag", "ah", "aj", "ak", "al", "az", "ax", "ac", "av", "ab", "an", "am", "aM", "aN", "aB",
"aV", "aC", "aZ", "aA", "aS", "aD", "aF", "aG", "aH", "aJ", "aK", "aL", "aP", "aI", "aU", "aY",
"aT", "aR", "aE", "aW", "aQ", "a!", "a~", "a^", "a/", "a(", "a)", "a_", "a`", "a'", "a]", "a[",
"a{", "a}", "a|", "s ", "s.", "sX", "so", "sO", "s+", "s@", "s#", "s$", "s%", "s&", "s*", "s=",
"s-", "s;", "s:", "s>", "s,", "s<", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "s0",
"sq", "sw", "se", "sr", "st", "sy", "su", "si", "sp", "sa", "ss", "sd", "sf", "sg", "sh", "sj",
"sk", "sl", "sz", "sx", "sc", "sv", "sb", "sn", "sm", "sM", "sN", "sB", "sV", "sC", "sZ", "sA",
"sS", "sD", "sF", "sG", "sH", "sJ", "sK", "sL", "sP", "sI", "sU", "sY", "sT", "sR", "sE", "sW",
"sQ", "s!", "s~", "s^", "s/", "s(", "s)", "s_", "s`", "s'", "s]", "s[", "s{", "s}", "s|", "d ",
"d.", "dX", "do", "dO", "d+", "d@", "d#", "d$", "d%", "d&", "d*", "d=", "d-", "d;", "d:", "d>",
"d,", "d<", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "d0", "dq", "dw", "de", "dr",
"dt", "dy", "du", "di", "dp", "da", "ds", "dd", "df", "dg", "dh", "dj", "dk", "dl", "dz", "dx",
"dc", "dv", "db", "dn", "dm", "dM", "dN", "dB", "dV", "dC", "dZ", "dA", "dS", "dD", "dF", "dG",
"dH", "dJ", "dK", "dL", "dP", "dI", "dU", "dY", "dT", "dR", "dE", "dW", "dQ", "d!", "d~", "d^",
"d/", "d(", "d)", "d_", "d`", "d'", "d]", "d[", "d{", "d}", "d|", "f ", "f.", "fX", "fo", "fO",
"f+", "f@", "f#", "f$", "f%", "f&", "f*", "f=", "f-", "f;", "f:", "f>", "f,", "f<", "f1", "f2",
"f3", "f4", "f5", "f6", "f7", "f8", "f9", "f0", "fq", "fw", "fe", "fr", "ft", "fy", "fu", "fi",
"fp", "fa", "fs", "fd", "ff", "fg", "fh", "fj", "fk", "fl", "fz", "fx", "fc", "fv", "fb", "fn",
"fm", "fM", "fN", "fB", "fV", "fC", "fZ", "fA", "fS", "fD", "fF", "fG", "fH", "fJ", "fK", "fL",
"fP", "fI", "fU", "fY", "fT", "fR", "fE", "fW", "fQ", "f!", "f~", "f^", "f/", "f(", "f)", "f_",
"f`", "f'", "f]", "f[", "f{", "f}", "f|", "g ", "g.", "gX", "go", "gO", "g+", "g@", "g#", "g$",
"g%", "g&", "g*", "g=", "g-", "g;", "g:", "g>", "g,", "g<", "g1", "g2", "g3", "g4", "g5", "g6",
"g7", "g8", "g9", "g0", "gq", "gw", "ge", "gr", "gt", "gy", "gu", "gi", "gp", "ga", "gs", "gd",
"gf", "gg", "gh", "gj", "gk", "gl", "gz", "gx", "gc", "gv", "gb", "gn", "gm", "gM", "gN", "gB",
"gV", "gC", "gZ", "gA", "gS", "gD", "gF", "gG", "gH", "gJ", "gK", "gL", "gP", "gI", "gU", "gY",
"gT", "gR", "gE", "gW", "gQ", "g!", "g~", "g^", "g/", "g(", "g)", "g_", "g`", "g'", "g]", "g[",
"g{", "g}", "g|", "h ", "h.", "hX", "ho", "hO", "h+", "h@", "h#", "h$", "h%", "h&", "h*", "h=",
"h-", "h;", "h:", "h>", "h,", "h<", "h1", "h2", "h3", "h4", "h5", "h6", "h7", "h8", "h9", "h0",
"hq", "hw", "he", "hr", "ht", "hy", "hu", "hi", "hp", "ha", "hs", "hd", "hf", "hg", "hh", "hj",
"hk", "hl", "hz", "hx", "hc", "hv", "hb", "hn", "hm", "hM", "hN", "hB", "hV", "hC", "hZ", "hA",
"hS", "hD", "hF", "hG", "hH", "hJ", "hK", "hL", "hP", "hI", "hU", "hY", "hT", "hR", "hE", "hW",
"hQ", "h!", "h~", "h^", "h/", "h(", "h)", "h_", "h`", "h'", "h]", "h[", "h{", "h}", "h|", "j ",
"j.", "jX", "jo", "jO", "j+", "j@", "j#", "j$", "j%", "j&", "j*", "j=", "j-", "j;", "j:", "j>",
"j,", "j<", "j1", "j2", "j3", "j4", "j5", "j6", "j7", "j8", "j9", "j0", "jq", "jw", "je", "jr",
"jt", "jy", "ju", "ji", "jp", "ja", "js", "jd", "jf", "jg", "jh", "jj", "jk", "jl", "jz", "jx",
"jc", "jv", "jb", "jn", "jm", "jM", "jN", "jB", "jV", "jC", "jZ", "jA", "jS", "jD", "jF", "jG",
"jH", "jJ", "jK", "jL", "jP", "jI", "jU", "jY", "jT", "jR", "jE", "jW", "jQ", "j!", "j~", "j^",
"j/", "j(", "j)", "j_", "j`", "j'", "j]", "j[", "j{", "j}", "j|", "k ", "k.", "kX", "ko", "kO",
"k+", "k@", "k#", "k$", "k%", "k&", "k*", "k=", "k-", "k;", "k:", "k>", "k,", "k<", "k1", "k2",
"k3", "k4", "k5", "k6", "k7", "k8", "k9", "k0", "kq", "kw", "ke", "kr", "kt", "ky", "ku", "ki",
"kp", "ka", "ks", "kd", "kf", "kg", "kh", "kj", "kk", "kl", "kz", "kx", "kc", "kv", "kb", "kn",
"km", "kM", "kN", "kB", "kV", "kC", "kZ", "kA", "kS", "kD", "kF", "kG", "kH", "kJ", "kK", "kL",
"kP", "kI", "kU", "kY", "kT", "kR", "kE", "kW", "kQ", "k!", "k~", "k^", "k/", "k(", "k)", "k_",
"k`", "k'", "k]", "k[", "k{", "k}", "k|", "l ", "l.", "lX", "lo", "lO", "l+", "l@", "l#", "l$",
"l%", "l&", "l*", "l=", "l-", "l;", "l:", "l>", "l,", "l<", "l1", "l2", "l3", "l4", "l5", "l6",
"l7", "l8", "l9", "l0", "lq", "lw", "le", "lr", "lt", "ly", "lu", "li", "lp", "la", "ls", "ld",
"lf", "lg", "lh", "lj", "lk", "ll", "lz", "lx", "lc", "lv", "lb", "ln", "lm", "lM", "lN", "lB",
"lV", "lC", "lZ", "lA", "lS", "lD", "lF", "lG", "lH", "lJ", "lK", "lL", "lP", "lI", "lU", "lY",
"lT", "lR", "lE", "lW", "lQ", "l!", "l~", "l^", "l/", "l(", "l)", "l_", "l`", "l'", "l]", "l[",
"l{", "l}", "l|", "z ", "z.", "zX", "zo", "zO", "z+", "z@", "z#", "z$", "z%", "z&", "z*", "z=",
"z-", "z;", "z:", "z>", "z,", "z<", "z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8", "z9", "z0",
"zq", "zw", "ze", "zr", "zt", "zy", "zu", "zi", "zp", "za", "zs", "zd", "zf", "zg", "zh", "zj",
"zk", "zl", "zz", "zx", "zc", "zv", "zb", "zn", "zm", "zM", "zN", "zB", "zV", "zC", "zZ", "zA",
"zS", "zD", "zF", "zG", "zH", "zJ", "zK", "zL", "zP", "zI", "zU", "zY", "zT", "zR", "zE", "zW",
"zQ", "z!", "z~", "z^", "z/", "z(", "z)", "z_", "z`", "z'", "z]", "z[", "z{", "z}", "z|", "x ",
"x.", "xX", "xo", "xO", "x+", "x@", "x#", "x$", "x%", "x&", "x*", "x=", "x-", "x;", "x:", "x>",
"x,", "x<", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x0", "xq", "xw", "xe", "xr",
"xt", "xy", "xu", "xi", "xp", "xa", "xs", "xd", "xf", "xg", "xh", "xj", "xk", "xl", "xz", "xx",
"xc", "xv", "xb", "xn", "xm", "xM", "xN", "xB", "xV", "xC", "xZ", "xA", "xS", "xD", "xF", "xG",
"xH", "xJ", "xK", "xL", "xP", "xI", "xU", "xY", "xT", "xR", "xE", "xW", "xQ", "x!", "x~", "x^",
"x/", "x(", "x)", "x_", "x`", "x'", "x]", "x[", "x{", "x}", "x|", "c ", "c.", "cX", "co", "cO",
"c+", "c@", "c#", "c$", "c%", "c&", "c*", "c=", "c-", "c;", "c:", "c>", "c,", "c<", "c1", "c2",
"c3", "c4", "c5", "c6", "c7", "c8", "c9", "c0", "cq", "cw", "ce", "cr", "ct", "cy", "cu", "ci",
"cp", "ca", "cs", "cd", "cf", "cg", "ch", "cj", "ck", "cl", "cz", "cx", "cc", "cv", "cb", "cn",
"cm", "cM", "cN", "cB", "cV", "cC", "cZ", "cA", "cS", "cD", "cF", "cG", "cH", "cJ", "cK", "cL",
"cP", "cI", "cU", "cY", "cT", "cR", "cE", "cW", "cQ", "c!", "c~", "c^", "c/", "c(", "c)", "c_",
"c`", "c'", "c]", "c[", "c{", "c}", "c|", "v ", "v.", "vX", "vo", "vO", "v+", "v@", "v#", "v$",
"v%", "v&", "v*", "v=", "v-", "v;", "v:", "v>", "v,", "v<", "v1", "v2", "v3", "v4", "v5", "v6",
"v7", "v8", "v9", "v0", "vq", "vw", "ve", "vr", "vt", "vy", "vu", "vi", "vp", "va", "vs", "vd",
"vf", "vg", "vh", "vj", "vk", "vl", "vz", "vx", "vc", "vv", "vb", "vn", "vm", "vM", "vN", "vB",
"vV", "vC", "vZ", "vA", "vS", "vD", "vF", "vG", "vH", "vJ", "vK", "vL", "vP", "vI", "vU", "vY",
"vT", "vR", "vE", "vW", "vQ", "v!", "v~", "v^", "v/", "v(", "v)", "v_", "v`", "v'", "v]", "v[",
"v{", "v}", "v|", "b ", "b.", "bX", "bo", "bO", "b+", "b@", "b#", "b$", "b%", "b&", "b*", "b=",
"b-", "b;", "b:", "b>", "b,", "b<", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "b0",
"bq", "bw", "be", "br", "bt", "by", "bu", "bi", "bp", "ba", "bs", "bd", "bf", "bg", "bh", "bj",
"bk", "bl", "bz", "bx", "bc", "bv", "bb", "bn", "bm", "bM", "bN", "bB", "bV", "bC", "bZ", "bA",
"bS", "bD", "bF", "bG", "bH", "bJ", "bK", "bL", "bP", "bI", "bU", "bY", "bT", "bR", "bE", "bW",
"bQ", "b!", "b~", "b^", "b/", "b(", "b)", "b_", "b`", "b'", "b]", "b[", "b{", "b}", "b|", "n ",
"n.", "nX", "no", "nO", "n+", "n@", "n#", "n$", "n%", "n&", "n*", "n=", "n-", "n;", "n:", "n>",
"n,", "n<", "n1", "n2", "n3", "n4", "n5", "n6", "n7", "n8", "n9", "n0", "nq", "nw", "ne", "nr",
"nt", "ny", "nu", "ni", "np", "na", "ns", "nd", "nf", "ng", "nh", "nj", "nk", "nl", "nz", "nx",
"nc", "nv", "nb", "nn", "nm", "nM", "nN", "nB", "nV", "nC", "nZ", "nA", "nS", "nD", "nF", "nG",
"nH", "nJ", "nK", "nL", "nP", "nI", "nU", "nY", "nT", "nR", "nE", "nW", "nQ", "n!", "n~", "n^",
"n/", "n(", "n)", "n_", "n`", "n'", "n]", "n[", "n{", "n}", "n|", "m ", "m.", "mX", "mo", "mO",
"m+", "m@", "m#", "m$", "m%", "m&", "m*", "m=", "m-", "m;", "m:", "m>", "m,", "m<", "m1", "m2",
"m3", "m4", "m5", "m6", "m7", "m8", "m9", "m0", "mq", "mw", "me", "mr", "mt", "my", "mu", "mi",
"mp", "ma", "ms", "md", "mf", "mg", "mh", "mj", "mk", "ml", "mz", "mx", "mc", "mv", "mb", "mn",
"mm", "mM", "mN", "mB", "mV", "mC", "mZ", "mA", "mS", "mD", "mF", "mG", "mH", "mJ", "mK", "mL",
"mP", "mI", "mU", "mY", "mT", "mR", "mE", "mW", "mQ", "m!", "m~", "m^", "m/", "m(", "m)", "m_",
"m`", "m'", "m]", "m[", "m{", "m}", "m|", "M ", "M.", "MX", "Mo", "MO", "M+", "M@", "M#", "M$",
"M%", "M&", "M*", "M=", "M-", "M;", "M:", "M>", "M,", "M<", "M1", "M2", "M3", "M4", "M5", "M6",
"M7", "M8", "M9", "M0", "Mq", "Mw", "Me", "Mr", "Mt", "My", "Mu", "Mi", "Mp", "Ma", "Ms", "Md",
"Mf", "Mg", "Mh", "Mj", "Mk", "Ml", "Mz", "Mx", "Mc", "Mv", "Mb", "Mn", "Mm", "MM", "MN", "MB",
"MV", "MC", "MZ", "MA", "MS", "MD", "MF", "MG", "MH", "MJ", "MK", "ML", "MP", "MI", "MU", "MY",
"MT", "MR", "ME", "MW", "MQ", "M!", "M~", "M^", "M/", "M(", "M)", "M_", "M`", "M'", "M]", "M[",
"M{", "M}", "M|", "N ", "N.", "NX", "No", "NO", "N+", "N@", "N#", "N$", "N%", "N&", "N*", "N=",
"N-", "N;", "N:", "N>", "N,", "N<", "N1", "N2", "N3", "N4", "N5", "N6", "N7", "N8", "N9", "N0",
"Nq", "Nw", "Ne", "Nr", "Nt", "Ny", "Nu", "Ni", "Np", "Na", "Ns", "Nd", "Nf", "Ng", "Nh", "Nj",
"Nk", "Nl", "Nz", "Nx", "Nc", "Nv", "Nb", "Nn", "Nm", "NM", "NN", "NB", "NV", "NC", "NZ", "NA",
"NS", "ND", "NF", "NG", "NH", "NJ", "NK", "NL", "NP", "NI", "NU", "NY", "NT", "NR", "NE", "NW",
"NQ", "N!", "N~", "N^", "N/", "N(", "N)", "N_", "N`", "N'", "N]", "N[", "N{", "N}", "N|", "B ",
"B.", "BX", "Bo", "BO", "B+", "B@", "B#", "B$", "B%", "B&", "B*", "B=", "B-", "B;", "B:", "B>",
"B,", "B<", "B1", "B2", "B3", "B4", "B5", "B6", "B7", "B8", "B9", "B0", "Bq", "Bw", "Be", "Br",
"Bt", "By", "Bu", "Bi", "Bp", "Ba", "Bs", "Bd", "Bf", "Bg", "Bh", "Bj", "Bk", "Bl", "Bz", "Bx",
"Bc", "Bv", "Bb", "Bn", "Bm", "BM", "BN", "BB", "BV", "BC", "BZ", "BA", "BS", "BD", "BF", "BG",
"BH", "BJ", "BK", "BL", "BP", "BI", "BU", "BY", "BT", "BR", "BE", "BW", "BQ", "B!", "B~", "B^",
"B/", "B(", "B)", "B_", "B`", "B'", "B]", "B[", "B{", "B}", "B|", "V ", "V.", "VX", "Vo", "VO",
"V+", "V@", "V#", "V$", "V%", "V&", "V*", "V=", "V-", "V;", "V:", "V>", "V,", "V<", "V1", "V2",
"V3", "V4", "V5", "V6", "V7", "V8", "V9", "V0", "Vq", "Vw", "Ve", "Vr", "Vt", "Vy", "Vu", "Vi",
"Vp", "Va", "Vs", "Vd", "Vf", "Vg", "Vh", "Vj", "Vk", "Vl", "Vz", "Vx", "Vc", "Vv", "Vb", "Vn",
"Vm", "VM", "VN", "VB", "VV", "VC", "VZ", "VA", "VS", "VD", "VF", "VG", "VH", "VJ", "VK", "VL",
"VP", "VI", "VU", "VY", "VT", "VR", "VE", "VW", "VQ", "V!", "V~", "V^", "V/", "V(", "V)", "V_",
"V`", "V'", "V]", "V[", "V{", "V}", "V|", "C ", "C.", "CX", "Co", "CO", "C+", "C@", "C#", "C$",
"C%", "C&", "C*", "C=", "C-", "C;", "C:", "C>", "C,", "C<", "C1", "C2", "C3", "C4", "C5", "C6",
"C7", "C8", "C9", "C0", "Cq", "Cw", "Ce", "Cr", "Ct", "Cy", "Cu", "Ci", "Cp", "Ca", "Cs", "Cd",
"Cf", "Cg", "Ch", "Cj", "Ck", "Cl", "Cz", "Cx", "Cc", "Cv", "Cb", "Cn", "Cm", "CM", "CN", "CB",
"CV", "CC", "CZ", "CA", "CS", "CD", "CF", "CG", "CH", "CJ", "CK", "CL", "CP", "CI", "CU", "CY",
"CT", "CR", "CE", "CW", "CQ", "C!", "C~", "C^", "C/", "C(", "C)", "C_", "C`", "C'", "C]", "C[",
"C{", "C}", "C|", "Z ", "Z.", "ZX", "Zo", "ZO", "Z+", "Z@", "Z#", "Z$", "Z%", "Z&", "Z*", "Z=",
"Z-", "Z;", "Z:", "Z>", "Z,", "Z<", "Z1", "Z2", "Z3", "Z4", "Z5", "Z6", "Z7", "Z8", "Z9", "Z0",
"Zq", "Zw", "Ze", "Zr", "Zt", "Zy", "Zu", "Zi", "Zp", "Za", "Zs", "Zd", "Zf", "Zg", "Zh", "Zj",
"Zk", "Zl", "Zz", "Zx", "Zc", "Zv", "Zb", "Zn", "Zm", "ZM", "ZN", "ZB", "ZV", "ZC", "ZZ", "ZA",
"ZS", "ZD", "ZF", "ZG", "ZH", "ZJ", "ZK", "ZL", "ZP", "ZI", "ZU", "ZY", "ZT", "ZR", "ZE", "ZW",
"ZQ", "Z!", "Z~", "Z^", "Z/", "Z(", "Z)", "Z_", "Z`", "Z'", "Z]", "Z[", "Z{", "Z}", "Z|", "A ",
"A.", "AX", "Ao", "AO", "A+", "A@", "A#", "A$", "A%", "A&", "A*", "A=", "A-", "A;", "A:", "A>",
"A,", "A<", "A1", "A2", "A3", "A4", "A5", "A6", "A7", "A8", "A9", "A0", "Aq", "Aw", "Ae", "Ar",
"At", "Ay", "Au", "Ai", "Ap", "Aa", "As", "Ad", "Af", "Ag", "Ah", "Aj", "Ak", "Al", "Az", "Ax",
"Ac", "Av", "Ab", "An", "Am", "AM", "AN", "AB", "AV", "AC", "AZ", "AA", "AS", "AD", "AF", "AG",
"AH", "AJ", "AK", "AL", "AP", "AI", "AU", "AY", "AT", "AR", "AE", "AW", "AQ", "A!", "A~", "A^",
"A/", "A(", "A)", "A_", "A`", "A'", "A]", "A[", "A{", "A}", "A|", "S ", "S.", "SX", "So", "SO",
"S+", "S@", "S#", "S$", "S%", "S&", "S*", "S=", "S-", "S;", "S:", "S>", "S,", "S<", "S1", "S2",
"S3", "S4", "S5", "S6", "S7", "S8", "S9", "S0", "Sq", "Sw", "Se", "Sr", "St", "Sy", "Su", "Si",
"Sp", "Sa", "Ss", "Sd", "Sf", "Sg", "Sh", "Sj", "Sk", "Sl", "Sz", "Sx", "Sc", "Sv", "Sb", "Sn",
"Sm", "SM", "SN", "SB", "SV", "SC", "SZ", "SA", "SS", "SD", "SF", "SG", "SH", "SJ", "SK", "SL",
"SP", "SI", "SU", "SY", "ST", "SR", "SE", "SW", "SQ", "S!", "S~", "S^", "S/", "S(", "S)", "S_",
"S`", "S'", "S]", "S[", "S{", "S}", "S|", "D ", "D.", "DX", "Do", "DO", "D+", "D@", "D#", "D$",
"D%", "D&", "D*", "D=", "D-", "D;", "D:", "D>", "D,", "D<", "D1", "D2", "D3", "D4", "D5", "D6",
"D7", "D8", "D9", "D0", "Dq", "Dw", "De", "Dr", "Dt", "Dy", "Du", "Di", "Dp", "Da", "Ds", "Dd",
"Df", "Dg", "Dh", "Dj", "Dk", "Dl", "Dz", "Dx", "Dc", "Dv", "Db", "Dn", "Dm", "DM", "DN", "DB",
"DV", "DC", "DZ", "DA", "DS", "DD", "DF", "DG", "DH", "DJ", "DK", "DL", "DP", "DI", "DU", "DY",
"DT", "DR", "DE", "DW", "DQ", "D!", "D~", "D^", "D/", "D(", "D)", "D_", "D`", "D'", "D]", "D[",
"D{", "D}", "D|", "F ", "F.", "FX", "Fo", "FO", "F+", "F@", "F#", "F$", "F%", "F&", "F*", "F=",
"F-", "F;", "F:", "F>", "F,", "F<", "F1", "F2", "F3", "F4", "F5", "F6", "F7", "F8", "F9", "F0",
"Fq", "Fw", "Fe", "Fr", "Ft", "Fy", "Fu", "Fi", "Fp", "Fa", "Fs", "Fd", "Ff", "Fg", "Fh", "Fj",
"Fk", "Fl", "Fz", "Fx", "Fc", "Fv", "Fb", "Fn", "Fm", "FM", "FN", "FB", "FV", "FC", "FZ", "FA",
"FS", "FD", "FF", "FG", "FH", "FJ", "FK", "FL", "FP", "FI", "FU", "FY", "FT", "FR", "FE", "FW",
"FQ", "F!", "F~", "F^", "F/", "F(", "F)", "F_", "F`", "F'", "F]", "F[", "F{", "F}", "F|", "G ",
"G.", "GX", "Go", "GO", "G+", "G@", "G#", "G$", "G%", "G&", "G*", "G=", "G-", "G;", "G:", "G>",
"G,", "G<", "G1", "G2", "G3", "G4", "G5", "G6", "G7", "G8", "G9", "G0", "Gq", "Gw", "Ge", "Gr",
"Gt", "Gy", "Gu", "Gi", "Gp", "Ga", "Gs", "Gd", "Gf", "Gg", "Gh", "Gj", "Gk", "Gl", "Gz", "Gx",
"Gc", "Gv", "Gb", "Gn", "Gm", "GM", "GN", "GB", "GV", "GC", "GZ", "GA", "GS", "GD", "GF", "GG",
"GH", "GJ", "GK", "GL", "GP", "GI", "GU", "GY", "GT", "GR", "GE", "GW", "GQ", "G!", "G~", "G^",
"G/", "G(", "G)", "G_", "G`", "G'", "G]", "G[", "G{", "G}", "G|", "H ", "H.", "HX", "Ho", "HO",
"H+", "H@", "H#", "H$", "H%", "H&", "H*", "H=", "H-", "H;", "H:", "H>", "H,", "H<", "H1", "H2",
"H3", "H4", "H5", "H6", "H7", "H8", "H9", "H0", "Hq", "Hw", "He", "Hr", "Ht", "Hy", "Hu", "Hi",
"Hp", "Ha", "Hs", "Hd", "Hf", "Hg", "Hh", "Hj", "Hk", "Hl", "Hz", "Hx", "Hc", "Hv", "Hb", "Hn",
"Hm", "HM", "HN", "HB", "HV", "HC", "HZ", "HA", "HS", "HD", "HF", "HG", "HH", "HJ", "HK", "HL",
"HP", "HI", "HU", "HY", "HT", "HR", "HE", "HW", "HQ", "H!", "H~", "H^", "H/", "H(", "H)", "H_",
"H`", "H'", "H]", "H[", "H{", "H}", "H|", "J ", "J.", "JX", "Jo", "JO", "J+", "J@", "J#", "J$",
"J%", "J&", "J*", "J=", "J-", "J;", "J:", "J>", "J,", "J<", "J1", "J2", "J3", "J4", "J5", "J6",
"J7", "J8", "J9", "J0", "Jq", "Jw", "Je", "Jr", "Jt", "Jy", "Ju", "Ji", "Jp", "Ja", "Js", "Jd",
"Jf", "Jg", "Jh", "Jj", "Jk", "Jl", "Jz", "Jx", "Jc", "Jv", "Jb", "Jn", "Jm", "JM", "JN", "JB",
"JV", "JC", "JZ", "JA", "JS", "JD", "JF", "JG", "JH", "JJ", "JK", "JL", "JP", "JI", "JU", "JY",
"JT", "JR", "JE", "JW", "JQ", "J!", "J~", "J^", "J/", "J(", "J)", "J_", "J`", "J'", "J]", "J[",
"J{", "J}", "J|", "K ", "K.", "KX", "Ko", "KO", "K+", "K@", "K#", "K$", "K%", "K&", "K*", "K=",
"K-", "K;", "K:", "K>", "K,", "K<", "K1", "K2", "K3", "K4", "K5", "K6", "K7", "K8", "K9", "K0",
"Kq", "Kw", "Ke", "Kr", "Kt", "Ky", "Ku", "Ki", "Kp", "Ka", "Ks", "Kd", "Kf", "Kg", "Kh", "Kj",
"Kk", "Kl", "Kz", "Kx", "Kc", "Kv", "Kb", "Kn", "Km", "KM", "KN", "KB", "KV", "KC", "KZ", "KA",
"KS", "KD", "KF", "KG", "KH", "KJ", "KK", "KL", "KP", "KI", "KU", "KY", "KT", "KR", "KE", "KW",
"KQ", "K!", "K~", "K^", "K/", "K(", "K)", "K_", "K`", "K'", "K]", "K[", "K{", "K}", "K|", "L ",
"L.", "LX", "Lo", "LO", "L+", "L@", "L#", "L$", "L%", "L&", "L*", "L=", "L-", "L;", "L:", "L>",
"L,", "L<", "L1", "L2", "L3", "L4", "L5", "L6", "L7", "L8", "L9", "L0", "Lq", "Lw", "Le", "Lr",
"Lt", "Ly", "Lu", "Li", "Lp", "La", "Ls", "Ld", "Lf", "Lg", "Lh", "Lj", "Lk", "Ll", "Lz", "Lx",
"Lc", "Lv", "Lb", "Ln", "Lm", "LM", "LN", "LB", "LV", "LC", "LZ", "LA", "LS", "LD", "LF", "LG",
"LH", "LJ", "LK", "LL", "LP", "LI", "LU", "LY", "LT", "LR", "LE", "LW", "LQ", "L!", "L~", "L^",
"L/", "L(", "L)", "L_", "L`", "L'", "L]", "L[", "L{", "L}", "L|", "P ", "P.", "PX", "Po", "PO",
"P+", "P@", "P#", "P$", "P%", "P&", "P*", "P=", "P-", "P;", "P:", "P>", "P,", "P<", "P1", "P2",
"P3", "P4", "P5", "P6", "P7", "P8", "P9", "P0", "Pq", "Pw", "Pe", "Pr", "Pt", "Py", "Pu", "Pi",
"Pp", "Pa", "Ps", "Pd", "Pf", "Pg", "Ph", "Pj", "Pk", "Pl", "Pz", "Px", "Pc", "Pv", "Pb", "Pn",
"Pm", "PM", "PN", "PB", "PV", "PC", "PZ", "PA", "PS", "PD", "PF", "PG", "PH", "PJ", "PK", "PL",
"PP", "PI", "PU", "PY", "PT", "PR", "PE", "PW", "PQ", "P!", "P~", "P^", "P/", "P(", "P)", "P_",
"P`", "P'", "P]", "P[", "P{", "P}", "P|", "I ", "I.", "IX", "Io", "IO", "I+", "I@", "I#", "I$",
"I%", "I&", "I*", "I=", "I-", "I;", "I:", "I>", "I,", "I<", "I1", "I2", "I3", "I4", "I5", "I6",
"I7", "I8", "I9", "I0", "Iq", "Iw", "Ie", "Ir", "It", "Iy", "Iu", "Ii", "Ip", "Ia", "Is", "Id",
"If", "Ig", "Ih", "Ij", "Ik", "Il", "Iz", "Ix", "Ic", "Iv", "Ib", "In", "Im", "IM", "IN", "IB",
"IV", "IC", "IZ", "IA", "IS", "ID", "IF", "IG", "IH", "IJ", "IK", "IL", "IP", "II", "IU", "IY",
"IT", "IR", "IE", "IW", "IQ", "I!", "I~", "I^", "I/", "I(", "I)", "I_", "I`", "I'", "I]", "I[",
"I{", "I}", "I|", "U ", "U.", "UX", "Uo", "UO", "U+", "U@", "U#", "U$", "U%", "U&", "U*", "U=",
"U-", "U;", "U:", "U>", "U,", "U<", "U1", "U2", "U3", "U4", "U5", "U6", "U7", "U8", "U9", "U0",
"Uq", "Uw", "Ue", "Ur", "Ut", "Uy", "Uu", "Ui", "Up", "Ua", "Us", "Ud", "Uf", "Ug", "Uh", "Uj",
"Uk", "Ul", "Uz", "Ux", "Uc", "Uv", "Ub", "Un", "Um", "UM", "UN", "UB", "UV", "UC", "UZ", "UA",
"US", "UD", "UF", "UG", "UH", "UJ", "UK", "UL", "UP", "UI", "UU", "UY", "UT", "UR", "UE", "UW",
"UQ", "U!", "U~", "U^", "U/", "U(", "U)", "U_", "U`", "U'", "U]", "U[", "U{", "U}", "U|", "Y ",
"Y.", "YX", "Yo", "YO", "Y+", "Y@", "Y#", "Y$", "Y%", "Y&", "Y*", "Y=", "Y-", "Y;", "Y:", "Y>",
"Y,", "Y<", "Y1", "Y2", "Y3", "Y4", "Y5", "Y6", "Y7", "Y8", "Y9", "Y0", "Yq", "Yw", "Ye", "Yr",
"Yt", "Yy", "Yu", "Yi", "Yp", "Ya", "Ys", "Yd", "Yf", "Yg", "Yh", "Yj", "Yk", "Yl", "Yz", "Yx",
"Yc", "Yv", "Yb", "Yn", "Ym", "YM", "YN", "YB", "YV", "YC", "YZ", "YA", "YS", "YD", "YF", "YG",
"YH", "YJ", "YK", "YL", "YP", "YI", "YU", "YY", "YT", "YR", "YE", "YW", "YQ", "Y!", "Y~", "Y^",
"Y/", "Y(", "Y)", "Y_", "Y`", "Y'", "Y]", "Y[", "Y{", "Y}", "Y|", "T ", "T.", "TX", "To", "TO",
"T+", "T@", "T#", "T$", "T%", "T&", "T*", "T=", "T-", "T;", "T:", "T>", "T,", "T<", "T1", "T2",
"T3", "T4", "T5", "T6", "T7", "T8", "T9", "T0", "Tq", "Tw", "Te", "Tr", "Tt", "Ty", "Tu", "Ti",
"Tp", "Ta", "Ts", "Td", "Tf", "Tg", "Th", "Tj", "Tk", "Tl", "Tz", "Tx", "Tc", "Tv", "Tb", "Tn",
"Tm", "TM", "TN", "TB", "TV", "TC", "TZ", "TA", "TS", "TD", "TF", "TG", "TH", "TJ", "TK", "TL",
"TP", "TI", "TU", "TY", "TT", "TR", "TE", "TW", "TQ", "T!", "T~", "T^", "T/", "T(", "T)", "T_",
"T`", "T'", "T]", "T[", "T{", "T}", "T|", "R ", "R.", "RX", "Ro", "RO", "R+", "R@", "R#", "R$",
"R%", "R&", "R*", "R=", "R-", "R;", "R:", "R>", "R,", "R<", "R1", "R2", "R3", "R4", "R5", "R6",
"R7", "R8", "R9", "R0", "Rq", "Rw", "Re", "Rr", "Rt", "Ry", "Ru", "Ri", "Rp", "Ra", "Rs", "Rd",
"Rf", "Rg", "Rh", "Rj", "Rk", "Rl", "Rz", "Rx", "Rc", "Rv", "Rb", "Rn", "Rm", "RM", "RN", "RB",
"RV", "RC", "RZ", "RA", "RS", "RD", "RF", "RG", "RH", "RJ", "RK", "RL", "RP", "RI", "RU", "RY",
"RT", "RR", "RE", "RW", "RQ", "R!", "R~", "R^", "R/", "R(", "R)", "R_", "R`", "R'", "R]", "R[",
"R{", "R}", "R|", "E ", "E.", "EX", "Eo", "EO", "E+", "E@", "E#", "E$", "E%", "E&", "E*", "E=",
"E-", "E;", "E:", "E>", "E,", "E<", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "E8", "E9", "E0",
"Eq", "Ew", "Ee", "Er", "Et", "Ey", "Eu", "Ei", "Ep", "Ea", "Es", "Ed", "Ef", "Eg", "Eh", "Ej",
"Ek", "El", "Ez", "Ex", "Ec", "Ev", "Eb", "En", "Em", "EM", "EN", "EB", "EV", "EC", "EZ", "EA",
"ES", "ED", "EF", "EG", "EH", "EJ", "EK", "EL", "EP", "EI", "EU", "EY", "ET", "ER", "EE", "EW",
"EQ", "E!", "E~", "E^", "E/", "E(", "E)", "E_", "E`", "E'", "E]", "E[", "E{", "E}", "E|", "W ",
"W.", "WX", "Wo", "WO", "W+", "W@", "W#", "W$", "W%", "W&", "W*", "W=", "W-", "W;", "W:", "W>",
"W,", "W<", "W1", "W2", "W3", "W4", "W5", "W6", "W7", "W8", "W9", "W0", "Wq", "Ww", "We", "Wr",
"Wt", "Wy", "Wu", "Wi", "Wp", "Wa", "Ws", "Wd", "Wf", "Wg", "Wh", "Wj", "Wk", "Wl", "Wz", "Wx",
"Wc", "Wv", "Wb", "Wn", "Wm", "WM", "WN", "WB", "WV", "WC", "WZ", "WA", "WS", "WD", "WF", "WG",
"WH", "WJ", "WK", "WL", "WP", "WI", "WU", "WY", "WT", "WR", "WE", "WW", "WQ", "W!", "W~", "W^",
"W/", "W(", "W)", "W_", "W`", "W'", "W]", "W[", "W{", "W}", "W|", "Q ", "Q.", "QX", "Qo", "QO",
"Q+", "Q@", "Q#", "Q$", "Q%", "Q&", "Q*", "Q=", "Q-", "Q;", "Q:", "Q>", "Q,", "Q<", "Q1", "Q2",
"Q3", "Q4", "Q5", "Q6", "Q7", "Q8", "Q9", "Q0", "Qq", "Qw", "Qe", "Qr", "Qt", "Qy", "Qu", "Qi",
"Qp", "Qa", "Qs", "Qd", "Qf", "Qg", "Qh", "Qj", "Qk", "Ql", "Qz", "Qx", "Qc", "Qv", "Qb", "Qn",
"Qm", "QM", "QN", "QB", "QV", "QC", "QZ", "QA", "QS", "QD", "QF", "QG", "QH", "QJ", "QK", "QL",
"QP", "QI", "QU", "QY", "QT", "QR", "QE", "QW", "QQ", "Q!", "Q~", "Q^", "Q/", "Q(", "Q)", "Q_",
"Q`", "Q'", "Q]", "Q[", "Q{", "Q}", "Q|", "! ", "!.", "!X", "!o", "!O", "!+", "!@", "!#", "!$",
"!%", "!&", "!*", "!=", "!-", "!;", "!:", "!>", "!,", "!<", "!1", "!2", "!3", "!4", "!5", "!6",
"!7", "!8", "!9", "!0", "!q", "!w", "!e", "!r", "!t", "!y", "!u", "!i", "!p", "!a", "!s", "!d",
"!f", "!g", "!h", "!j", "!k", "!l", "!z", "!x", "!c", "!v", "!b", "!n", "!m", "!M", "!N", "!B",
"!V", "!C", "!Z", "!A", "!S", "!D", "!F", "!G", "!H", "!J", "!K", "!L", "!P", "!I", "!U", "!Y",
"!T", "!R", "!E", "!W", "!Q", "!!", "!~", "!^", "!/", "!(", "!)", "!_", "!`", "!'", "!]", "![",
"!{", "!}", "!|", "~ ", "~.", "~X", "~o", "~O", "~+", "~@", "~#", "~$", "~%", "~&", "~*", "~=",
"~-", "~;", "~:", "~>", "~,", "~<", "~1", "~2", "~3", "~4", "~5", "~6", "~7", "~8", "~9", "~0",
"~q", "~w", "~e", "~r", "~t", "~y", "~u", "~i", "~p", "~a", "~s", "~d", "~f", "~g", "~h", "~j",
"~k", "~l", "~z", "~x", "~c", "~v", "~b", "~n", "~m", "~M", "~N", "~B", "~V", "~C", "~Z", "~A",
"~S", "~D", "~F", "~G", "~H", "~J", "~K", "~L", "~P", "~I", "~U", "~Y", "~T", "~R", "~E", "~W",
"~Q", "~!", "~~", "~^", "~/", "~(", "~)", "~_", "~`", "~'", "~]", "~[", "~{", "~}", "~|", "^ ",
"^.", "^X", "^o", "^O", "^+", "^@", "^#", "^$", "^%", "^&", "^*", "^=", "^-", "^;", "^:", "^>",
"^,", "^<", "^1", "^2", "^3", "^4", "^5", "^6", "^7", "^8", "^9", "^0", "^q", "^w", "^e", "^r",
"^t", "^y", "^u", "^i", "^p", "^a", "^s", "^d", "^f", "^g", "^h", "^j", "^k", "^l", "^z", "^x",
"^c", "^v", "^b", "^n", "^m", "^M", "^N", "^B", "^V", "^C", "^Z", "^A", "^S", "^D", "^F", "^G",
"^H", "^J", "^K", "^L", "^P", "^I", "^U", "^Y", "^T", "^R", "^E", "^W", "^Q", "^!", "^~", "^^",
"^/", "^(", "^)", "^_", "^`", "^'", "^]", "^[", "^{", "^}", "^|", "/ ", "/.", "/X", "/o", "/O",
"/+", "/@", "/#", "/$", "/%", "/&", "/*", "/=", "/-", "/;", "/:", "/>", "/,", "/<", "/1", "/2",
"/3", "/4", "/5", "/6", "/7", "/8", "/9", "/0", "/q", "/w", "/e", "/r", "/t", "/y", "/u", "/i",
"/p", "/a", "/s", "/d", "/f", "/g", "/h", "/j", "/k", "/l", "/z", "/x", "/c", "/v", "/b", "/n",
"/m", "/M", "/N", "/B", "/V", "/C", "/Z", "/A", "/S", "/D", "/F", "/G", "/H", "/J", "/K", "/L",
"/P", "/I", "/U", "/Y", "/T", "/R", "/E", "/W", "/Q", "/!", "/~", "/^", "//", "/(", "/)", "/_",
"/`", "/'", "/]", "/[", "/{", "/}", "/|", "( ", "(.", "(X", "(o", "(O", "(+", "(@", "(#", "($",
"(%", "(&", "(*", "(=", "(-", "(;", "(:", "(>", "(,", "(<", "(1", "(2", "(3", "(4", "(5", "(6",
"(7", "(8", "(9", "(0", "(q", "(w", "(e", "(r", "(t", "(y", "(u", "(i", "(p", "(a", "(s", "(d",
"(f", "(g", "(h", "(j", "(k", "(l", "(z", "(x", "(c", "(v", "(b", "(n", "(m", "(M", "(N", "(B",
"(V", "(C", "(Z", "(A", "(S", "(D", "(F", "(G", "(H", "(J", "(K", "(L", "(P", "(I", "(U", "(Y",
"(T", "(R", "(E", "(W", "(Q", "(!", "(~", "(^", "(/", "((", "()", "(_", "(`", "('", "(]", "([",
"({", "(}", "(|", ") ", ").", ")X", ")o", ")O", ")+", ")@", ")#", ")$", ")%", ")&", ")*", ")=",
")-", ");", "):", ")>", "),", ")<", ")1", ")2", ")3", ")4", ")5", ")6", ")7", ")8", ")9", ")0",
")q", ")w", ")e", ")r", ")t", ")y", ")u", ")i", ")p", ")a", ")s", ")d", ")f", ")g", ")h", ")j",
")k", ")l", ")z", ")x", ")c", ")v", ")b", ")n", ")m", ")M", ")N", ")B", ")V", ")C", ")Z", ")A",
")S", ")D", ")F", ")G", ")H", ")J", ")K", ")L", ")P", ")I", ")U", ")Y", ")T", ")R", ")E", ")W",
")Q", ")!", ")~", ")^", ")/", ")(", "))", ")_", ")`", ")'", ")]", ")[", "){", ")}", ")|", "_ ",
"_.", "_X", "_o", "_O", "_+", "_@", "_#", "_$", "_%", "_&", "_*", "_=", "_-", "_;", "_:", "_>",
"_,", "_<", "_1", "_2", "_3", "_4", "_5", "_6", "_7", "_8", "_9", "_0", "_q", "_w", "_e", "_r",
"_t", "_y", "_u", "_i", "_p", "_a", "_s", "_d", "_f", "_g", "_h", "_j", "_k", "_l", "_z", "_x",
"_c", "_v", "_b", "_n", "_m", "_M", "_N", "_B", "_V", "_C", "_Z", "_A", "_S", "_D", "_F", "_G",
"_H", "_J", "_K", "_L", "_P", "_I", "_U", "_Y", "_T", "_R", "_E", "_W", "_Q", "_!", "_~", "_^",
"_/", "_(", "_)", "__", "_`", "_'", "_]", "_[", "_{", "_}", "_|", "` ", "`.", "`X", "`o", "`O",
"`+", "`@", "`#", "`$", "`%", "`&", "`*", "`=", "`-", "`;", "`:", "`>", "`,", "`<", "`1", "`2",
"`3", "`4", "`5", "`6", "`7", "`8", "`9", "`0", "`q", "`w", "`e", "`r", "`t", "`y", "`u", "`i",
"`p", "`a", "`s", "`d", "`f", "`g", "`h", "`j", "`k", "`l", "`z", "`x", "`c", "`v", "`b", "`n",
"`m", "`M", "`N", "`B", "`V", "`C", "`Z", "`A", "`S", "`D", "`F", "`G", "`H", "`J", "`K", "`L",
"`P", "`I", "`U", "`Y", "`T", "`R", "`E", "`W", "`Q", "`!", "`~", "`^", "`/", "`(", "`)", "`_",
"``", "`'", "`]", "`[", "`{", "`}", "`|", "' ", "'.", "'X", "'o", "'O", "'+", "'@", "'#", "'$",
"'%", "'&", "'*", "'=", "'-", "';", "':", "'>", "',", "'<", "'1", "'2", "'3", "'4", "'5", "'6",
"'7", "'8", "'9", "'0", "'q", "'w", "'e", "'r", "'t", "'y", "'u", "'i", "'p", "'a", "'s", "'d",
"'f", "'g", "'h", "'j", "'k", "'l", "'z", "'x", "'c", "'v", "'b", "'n", "'m", "'M", "'N", "'B",
"'V", "'C", "'Z", "'A", "'S", "'D", "'F", "'G", "'H", "'J", "'K", "'L", "'P", "'I", "'U", "'Y",
"'T", "'R", "'E", "'W", "'Q", "'!", "'~", "'^", "'/", "'(", "')", "'_", "'`", "''", "']", "'[",
"'{", "'}", "'|", "] ", "].", "]X", "]o", "]O", "]+", "]@", "]#", "]$", "]%", "]&", "]*", "]=",
"]-", "];", "]:", "]>", "],", "]<", "]1", "]2", "]3", "]4", "]5", "]6", "]7", "]8", "]9", "]0",
"]q", "]w", "]e", "]r", "]t", "]y", "]u", "]i", "]p", "]a", "]s", "]d", "]f", "]g", "]h", "]j",
"]k", "]l", "]z", "]x", "]c", "]v", "]b", "]n", "]m", "]M", "]N", "]B", "]V", "]C", "]Z", "]A",
"]S", "]D", "]F", "]G", "]H", "]J", "]K", "]L", "]P", "]I", "]U", "]Y", "]T", "]R", "]E", "]W",
"]Q", "]!", "]~", "]^", "]/", "](", "])", "]_", "]`", "]'", "]]", "][", "]{", "]}", "]|", "[ ",
"[.", "[X", "[o", "[O", "[+", "[@", "[#", "[$", "[%", "[&", "[*", "[=", "[-", "[;", "[:", "[>",
"[,", "[<", "[1", "[2", "[3", "[4", "[5", "[6", "[7", "[8", "[9", "[0", "[q", "[w", "[e", "[r",
"[t", "[y", "[u", "[i", "[p", "[a", "[s", "[d", "[f", "[g", "[h", "[j", "[k", "[l", "[z", "[x",
"[c", "[v", "[b", "[n", "[m", "[M", "[N", "[B", "[V", "[C", "[Z", "[A", "[S", "[D", "[F", "[G",
"[H", "[J", "[K", "[L", "[P", "[I", "[U", "[Y", "[T", "[R", "[E", "[W", "[Q", "[!", "[~", "[^",
"[/", "[(", "[)", "[_", "[`", "['", "[]", "[[", "[{", "[}", "[|", "{ ", "{.", "{X", "{o", "{O",
"{+", "{@", "{#", "{$", "{%", "{&", "{*", "{=", "{-", "{;", "{:", "{>", "{,", "{<", "{1", "{2",
"{3", "{4", "{5", "{6", "{7", "{8", "{9", "{0", "{q", "{w", "{e", "{r", "{t", "{y", "{u", "{i",
"{p", "{a", "{s", "{d", "{f", "{g", "{h", "{j", "{k", "{l", "{z", "{x", "{c", "{v", "{b", "{n",
"{m", "{M", "{N", "{B", "{V", "{C", "{Z", "{A", "{S", "{D", "{F", "{G", "{H", "{J", "{K", "{L",
"{P", "{I", "{U", "{Y", "{T", "{R", "{E", "{W", "{Q", "{!", "{~", "{^", "{/", "{(", "{)", "{_",
"{`", "{'", "{]", "{[", "{{", "{}", "{|", "} ", "}.", "}X", "}o", "}O", "}+", "}@", "}#", "}$",
"}%", "}&", "}*", "}=", "}-", "};", "}:", "}>", "},", "}<", "}1", "}2", "}3", "}4", "}5", "}6",
"}7", "}8", "}9", "}0", "}q", "}w", "}e", "}r", "}t", "}y", "}u", "}i", "}p", "}a", "}s", "}d",
"}f", "}g", "}h", "}j", "}k", "}l", "}z", "}x", "}c", "}v", "}b", "}n", "}m", "}M", "}N", "}B",
"}V", "}C", "}Z", "}A", "}S", "}D", "}F", "}G", "}H", "}J", "}K", "}L", "}P", "}I", "}U", "}Y",
"}T", "}R", "}E", "}W", "}Q", "}!", "}~", "}^", "}/", "}(", "})", "}_", "}`", "}'", "}]", "}[",
"}{", "}}", "}|", "| ", "|.", "|X", "|o", "|O", "|+", "|@", "|#", "|$", "|%", "|&", "|*", "|=",
"|-", "|;", "|:", "|>", "|,", "|<", "|1", "|2", "|3", "|4", "|5", "|6", "|7", "|8", "|9", "|0",
"|q", "|w", "|e", "|r", "|t", "|y", "|u", "|i", "|p", "|a", "|s", "|d", "|f", "|g", "|h", "|j",
"|k", "|l", "|z", "|x", "|c", "|v", "|b", "|n", "|m", "|M", "|N", "|B", "|V", "|C", "|Z", "|A",
"|S", "|D", "|F", "|G", "|H", "|J", "|K", "|L", "|P", "|I", "|U", "|Y", "|T", "|R", "|E", "|W",
"|Q", "|!", "|~", "|^", "|/", "|(", "|)", "|_", "|`", "|'", "|]", "|[", "|{", "|}", "||" 
};

/** STRUCTS **/
/*
An icon-resource file contains image data for icons used by Windows
applications. The file consists of an icon directory identifying the number 
and types of icon images in the file, plus one or more icon images.
--GFF
*/
/* I have changed the structure member names from the published defaults
	to more meaningful names. 
*/
struct ICODirEntry {
	uint8_t	width;		/* width of the image in pixels */
	uint8_t	height;		/* height of the image in pixels */
	uint8_t	color_count;	/* number of colors in image, 0 if >= 8bpp */
	uint8_t	reserved;	/* put your weed in here, man */
	uint16_t	color_planes;	/* color planes */
	uint16_t	bits_per_pixel;
	uint32_t	bytes_in_resource; /* length of the DIB image */
	uint32_t	offset_in_file;	/* where in the file is this image? */
};

struct ICODir {
	uint16_t	reserved;
	uint16_t	resource_type;	/* 1 = icon */
	uint16_t	image_count;	/* number of images in the file */
	ICODirEntry* image_entries;
};

/* The following two structs are DIB information. */
/*
   long is signed, but the members that had type "long" should never be
   negative.  Since it helps my endian changing, I changed the following
   members' types to uint32_t from long: width, height, x_pels_per_meter,
	y_pels_per_meter
*/
struct ICOImageHeader {
	uint32_t	size;		/* number of bytes required by this struct */
	uint32_t	width;		/* width of bitmap in pixels */
	uint32_t	height;		/* height of bitmap in pixels */
	uint16_t	planes;		/* number of planes, must be 1 */
	uint16_t	bits_per_pixel;	/* valid values are 1,4,8,24 */
		/* all members below should be set to zero for icons */
	uint32_t	compression;	/* type of compression: BI_RGB,BI_RLE8,BI_RLE4
				   which are 0, 1, 2 respectively.  It's always zero for icons. */
	uint32_t	image_size;	/* size in bytes */
	uint32_t	x_pels_per_meter; /* horizontal resolution in pixels per meter*/
	uint32_t	y_pels_per_meter; /* vertical resolution in pixels per meter */
	uint32_t	colors_used;	/* number of color indexes actually used */
	uint32_t	colors_important; /* number of important colors */
};

struct ICORGBColor {
	uint8_t	blue;
	uint8_t	green;
	uint8_t	red;
	uint8_t	reserved;	/* must be set to zero */
};

/* 
   This structure is a single icon image.  The data here is normalized to
   1 uint8_t per pixel, with a maximum of 256 colors.
*/
struct ICOImage {
	uint32_t	width;		/* in pixels */
	uint32_t	height;		/* in pixels */
	ICORGBColor* colors;
	uint32_t	num_colors;
	uint8_t*	data;
	uint8_t*	mask;
};

/** DLL structures for loading Icon Libraries. **/
struct ICONameInfo {
	uint16_t	offset;		/* offset to resource data from beginning
				   of file */
	uint16_t	length;		/* resource length in bytes */
	uint16_t	flags;		/* flags important to executables */
	uint16_t	id;		/* specifies or points to the resource identifier */
	uint16_t	handle;		/* reserved */
	uint16_t	usage;		/* reserved */
};

struct ICOTypeInfo {
	uint16_t	type_id;	/* type identifier of the resource */
	uint16_t	resource_count;	/* number of resources of this type in file */
	uint32_t	reserved;
	ICONameInfo* name_info;	/* information about individual resources,
				   there are resource_count number of these */
};

struct ICOResourceTable {
	uint16_t	alignment_shift;  /* alignment shift count for resource data */
	ICOTypeInfo types[2];  	  /* contains information about a resource,
				     one per resource type in the file */
	/* NOTE: since only icons, changing ICOTypeInfo* to a single ICOTypeInfo */
	uint16_t	end_types;	  /* marks end of resource type defns, must be zero */
	uint8_t*	resource_names;	  /* names assoc. with the resources, first
				     uint8_t is number of chars in name */
	uint8_t	end_names;	  /* marks end of resource names */
};

/* My internal structure for file offsets. 
	All offsets are to the beginning of the named structure.
	All offsets are from the beginning of the file.
*/
struct ICOTableOffsets {
	uint32_t	win_header_start;
	uint32_t	resource_table;
	uint32_t	resident_name_table;
	uint32_t	first_resource;
	uint32_t	first_DIB_resource;
};

// Error codes - internal, use get_err_msg() to get a descriptive error
enum {
	icoSuccess,
	icoNoMemory,
	icoFileFormatError,
	icoFileOpenError,
	icoUnknown
};

static int  ico_error_code;

/** PROTOTYPES **/
/* external */
static int read_ICO_file(std::istream &stream, ICOImage** images);

/* internal */
static int read_icon_directory(std::istream &stream);
static int read_icon_dir_entry(std::istream &stream, ICODirEntry* ide);
static int read_DIB_header(std::istream &stream, ICOImageHeader* bmp_header);
static int read_DIB_color(std::istream &stream, ICORGBColor* color);
static int read_image_data(std::istream &stream, uint32_t width, uint32_t height, uint32_t bpp, uint8_t* data, uint8_t* mask_data);
static int read_uint8_t(std::istream &stream, uint8_t *b);
static int read_uint16_t(std::istream &stream, uint16_t *w);
static int read_double_uint16_t(std::istream &stream, uint32_t *dw);
static int remove_unused_colors(ICOImage *image);

/**
   read_ICO_file()
	Read image from a .ico file into an array of my internal structure
	type.  Returns the number of images read, -1 if an error occured.
	I use the evil goto in this function so that I can free all the
	memory I allocate.  Errors before any mallocing is done just return.
	After that, check and free any of my memory after an error.
**/
static int read_ICO_file(std::istream &stream, ICOImage** images_ptr) {
	ICODir icondir;
	ICOImageHeader bmp_header;
	ICOImage* images = nullptr;
	int rv = 1;
	int i=0, j=0;

	if (!stream) {
		ico_error_code = icoFileOpenError;

		return -1;
	}

	if (images_ptr == nullptr) {
		ico_error_code = icoNoMemory;
	
    return -1;
	}

	images = *images_ptr;

	/* Read Icon Directory */
	icondir.image_count = read_icon_directory(stream);
	if (icondir.image_count <= 0) {
		ico_error_code = icoFileFormatError;
    std::cerr << "Error reading icon directory" << std::endl;
		return -1;
	}

	/* Read Icon Directory Entries */
	icondir.image_entries = nullptr;
	icondir.image_entries = (ICODirEntry *) malloc(icondir.image_count * sizeof(ICODirEntry));
	if (icondir.image_entries == nullptr) {
		ico_error_code = icoNoMemory;
		return -1;
	}
	for (i=0; i<icondir.image_count; i++) {
		rv = read_icon_dir_entry(stream, &(icondir.image_entries[i]));
		if (rv != 1) {
			ico_error_code = icoFileFormatError;
      std::cerr << "Error reading icon directory " << std::endl;
			goto error;
		}
	}

	/* Create ICOImages Memory */
	images = (ICOImage *) malloc(icondir.image_count * sizeof(ICOImage));
	if (images == nullptr) {
		ico_error_code = icoNoMemory;
		goto error;
	}

	/* Read DIBs into ICOImages */
	for (i=0; i<icondir.image_count; i++) {
		/* Seek To DIB */
		stream.seekg(icondir.image_entries[i].offset_in_file, stream.beg);
		/*
		rv = fseek(f,icondir.image_entries[i].offset_in_file, SEEK_SET);
		if (rv == -1) {
			ico_error_code = icoFileFormatError;
      std::cerr << "Error seeking to DIB" << std::endl;
			goto error;
		}
		*/

		/* Read DIB Header */
		rv = read_DIB_header(stream, &bmp_header);
		if (rv != 1) {
			ico_error_code = icoFileFormatError;
      std::cerr << "Error reading image header" << std::endl;
			goto error;
		}

		/* Copy important DIB header info into ICOImage */
		images[i].width = bmp_header.width;
		images[i].height = bmp_header.height / 2;
		images[i].num_colors = icondir.image_entries[i].color_count;

		/* Get Colors */
		/* if num_colors is 0, it's 8bpp, which is 256 colors max */
		if (images[i].num_colors == 0) {
			images[i].num_colors = 256;
		}
		images[i].colors = nullptr;
		images[i].colors = (ICORGBColor *) malloc(images[i].num_colors * sizeof(ICORGBColor));
		if (images[i].colors == nullptr) {
			ico_error_code = icoNoMemory;
			goto error;
		}
		for (j=0; j<(int)images[i].num_colors; j++) {
			rv = read_DIB_color(stream, &(images[i].colors[j]));
			if (rv != 1) {
				ico_error_code = icoFileFormatError;
        std::cerr << "Error reading color info" << std::endl;
				goto error;
			}
		}

		/* Get Image and Mask Data */
		images[i].data = nullptr;
		images[i].mask = nullptr;
		images[i].data = (uint8_t *) malloc((8/bmp_header.bits_per_pixel)* images[i].width * images[i].height * sizeof(uint8_t));
		images[i].mask = (uint8_t *) malloc((8/bmp_header.bits_per_pixel)* images[i].width * images[i].height * sizeof(uint8_t));
		if ((images[i].data == nullptr) || (images[i].mask == nullptr)) {
			ico_error_code = icoNoMemory;
			goto error;
		}
		rv = read_image_data(stream, images[i].width, images[i].height, bmp_header.bits_per_pixel, images[i].data, images[i].mask);
		if (rv != 1) {
			ico_error_code = icoFileFormatError;
      std::cerr << "Error reading image data" << std::endl;
			goto error;
		}

		rv = remove_unused_colors(&(images[i]));
		if (rv != 1) {
			ico_error_code = icoUnknown;
      std::cerr << "Error reducing colors" << std::endl;
			goto error;
		}

	} /* end get DIB */

	if (icondir.image_entries != nullptr) {
    free(icondir.image_entries);
  }

	*images_ptr = images;

	return icondir.image_count;

error:
	if (icondir.image_entries != nullptr) {
    free(icondir.image_entries);
  }

	if (images != nullptr) {
		for (i=0; i<(int)bmp_header.colors_used; i++) {
			if (images[i].colors != nullptr) {
				free(images[i].colors);
			}
			if (images[i].data != nullptr) {
				free(images[i].data);
			}
			if (images[i].mask != nullptr) {
				free(images[i].mask);
			}
		}
		free(images);
		images = nullptr;
	}
	return -1;
}

/**
   read_icon_directory()
	Read icon directory information from the file pointer provided.
	Returns the number of icon images in the file.
**/
static int read_icon_directory(std::istream &stream) {
	uint16_t tmp = 0;
	int  rv = 0;

	/* Reserved WORD, 0 is only acceptable value */
	rv = read_uint16_t(stream, &tmp);
  std::cerr << "reserved uint16_t is " << tmp << std::endl;
	if ((rv != 1) || (tmp != 0)) return 0;

	/* Type of file, should be 1, icon type */
	rv = read_uint16_t(stream, &tmp);
  std::cerr << "type " << tmp << " should be 1" << std::endl;
	if ((rv != 1) || (tmp != 1)) return 0;

	/* Number of images in the file */
	rv = read_uint16_t(stream, &tmp);
  std::cerr << "number of images " << tmp << std::endl;
	if (rv != 1) return 0;

	return tmp;
}

/**
   read_icon_dir_entry()
	Read the ICODirEntry structure from disk.
**/
static int read_icon_dir_entry(std::istream &stream, ICODirEntry* ide) {
	int rv = 1;

	/* width */
	rv = read_uint8_t(stream, &(ide->width));
  std::cerr << "width = " << ide->width << std::endl;
	if (rv != 1) return 0;

	/* height */
	rv = read_uint8_t(stream, &(ide->height));
	if (rv != 1) return 0;
  std::cerr << "height = " << ide->height << std::endl;

	/* number of colors in the image */
	rv = read_uint8_t(stream, &(ide->color_count));
  std::cerr << "color_count = " << ide->color_count << std::endl;
	if (rv != 1) return 0;

	/* reserved */
	rv = read_uint8_t(stream, &(ide->reserved));
	if (rv != 1) return 0;

	/* number of color planes? */
	rv = read_uint16_t(stream, &(ide->color_planes));
  std::cerr << "color_planes = " << ide->color_planes << std::endl;
	if (rv != 1) return 0;

	/* bits per pixel */
	rv = read_uint16_t(stream, &(ide->bits_per_pixel));
  std::cerr << "bits_per_pixel= " << ide->bits_per_pixel << std::endl;
	if (rv != 1) return 0;

	/* bytes in resource */
	rv = read_double_uint16_t(stream, &(ide->bytes_in_resource));
  std::cerr << "bytes_in_resource = " << ide->bytes_in_resource << std::endl;
	if (rv != 1) return 0;

	/* offset in file where the image is */
	rv = read_double_uint16_t(stream, &(ide->offset_in_file));
  std::cerr << "offset_in_file = " << ide->offset_in_file << std::endl;
	if (rv != 1) return 0;

	return 1;
}

/**
   read_DIB_header()
	Read the ICOImageHeader structure members from a file.
**/
static int read_DIB_header(std::istream &stream, ICOImageHeader* bmp_header) {
	int rv = 0;

	/* size */
	rv = read_double_uint16_t(stream, &(bmp_header->size));
  std::cerr << "BMP size = " << bmp_header->size << std::endl;
	if (rv == 0) return 0;

	/* width */
	rv = read_double_uint16_t(stream, &(bmp_header->width));
  std::cerr << "BMP width = " << bmp_header->width << std::endl;
	if (rv == 0) return 0;

	/* height */
	rv = read_double_uint16_t(stream, &(bmp_header->height));
  std::cerr << "BMP height = " << bmp_header->height << std::endl;
	if (rv == 0) return 0;

	/* number of color planes */
	rv = read_uint16_t(stream, &(bmp_header->planes));
  std::cerr << "BMP planes = " << bmp_header->planes << std::endl;
	if ((rv == 0) || (bmp_header->planes != 1)) return 0;

	/* bits per pixel */
	rv = read_uint16_t(stream, &(bmp_header->bits_per_pixel));
  std::cerr << "BMP bpp = " << bmp_header->bits_per_pixel << std::endl;
	if (rv == 0) return 0;

  std::cerr << "BMP All the following BMP values should be zero" << std::endl;
  std::cerr << "BMP but since some icons aren't zero here" << std::endl;
  std::cerr << "BMP ignore the values we get" << std::endl;

	/* compression */
	rv = read_double_uint16_t(stream, &(bmp_header->compression));
  std::cerr << "BMP compression = " << bmp_header->compression << std::endl;
	if (rv == 0) return 0;

	/* image size in bytes */
	rv = read_double_uint16_t(stream, &(bmp_header->image_size));
  std::cerr << "BMP image size = " << bmp_header->image_size << std::endl;
	if (rv == 0) return 0;

	/* horiz pixels per meter */
	rv = read_double_uint16_t(stream, &(bmp_header->x_pels_per_meter));
  std::cerr << "BMP x pels per meter = " << bmp_header->x_pels_per_meter << std::endl;
	if (rv == 0) return 0;

	/* vert pixels per meter */
	rv = read_double_uint16_t(stream, &(bmp_header->y_pels_per_meter));
  std::cerr << "BMP y pels per meter = " << bmp_header->y_pels_per_meter << std::endl;
	if (rv == 0) return 0;

	/* number of color indicies used */
	rv = read_double_uint16_t(stream, &(bmp_header->colors_used));
  std::cerr << "BMP colors used = " << bmp_header->colors_used << std::endl;
	if (rv == 0) return 0;

	/* number of important colors */
	rv = read_double_uint16_t(stream, &(bmp_header->colors_important));
  std::cerr << "BMP colors important = " << bmp_header->colors_important << std::endl;
	if (rv == 0) return 0;

	return 1;
}

/**
   read_DIB_color()
	Read an ICORGBColor structure from a file.
**/
static int read_DIB_color(std::istream &stream, ICORGBColor* color) {
	int rv = 1;

	/* RGB and the order is blue, green, red??? */
	/* blue */
	rv = read_uint8_t(stream, &(color->blue));
  std::cerr << "RGB blue = " << color->blue << std::endl;
	if (rv != 1) return 0;

	/* green */
	rv = read_uint8_t(stream, &(color->green));
  std::cerr << "green = " << color->green << std::endl;
	if (rv != 1) return 0;

	/* red */
	rv = read_uint8_t(stream, &(color->red));
  std::cerr << "red = " << color->red << std::endl;
	if (rv != 1) return 0;

	/* reserved */
	rv = read_uint8_t(stream, &(color->reserved));
  std::cerr << "reserved (should be 0) = " << color->reserved << std::endl;
	if ((rv != 1) || (color->reserved != 0)) return 0;

	return 1;
}
/**
   read_image_data()
	Read the image data from file.  Image is upside down in the file,
	so, correct it.  Also, normalize to 1 uint8_t per pixel.
	Read the mask and deal with it.
	I know this function looks huge, but there's alot of loops
	and nesting which makes it longer than it really is.
**/
static int read_image_data(std::istream &stream, uint32_t width, uint32_t height, uint32_t bpp, uint8_t* data, uint8_t* mask_data){
	int	i, j, k;
	/* cheesy, but I don't want to deal w/ malloc and this mess */
	uint32_t	bytes_per_line = width * bpp /8;
	uint8_t	*buf = new uint8_t[height*bytes_per_line];
	uint8_t	*image = new uint8_t[width*height];

	uint32_t mask_bytes_per_line = width * 1/8;
	uint8_t	*mask_buf = new uint8_t[height*mask_bytes_per_line];
	uint8_t	*mask = new uint8_t[width*height];

	/* Get the image data */
	int sz = bytes_per_line * height;
	if (!stream.read((char *)buf, sz)) {
    delete [] mask;
    delete [] mask_buf;
    delete [] image;
    delete [] buf;

		return 0;
	}

	/* Normalize if neccesary */
	if (bpp == 8) {
		for (i=0; i<(int)(bytes_per_line*height); i++) {
			image[i] = buf[i];
		}
	} else if (bpp == 4) {
		for (i=0; i<(int)(bytes_per_line*height); i++) {
			image[i*2]   = buf[i] >> 4;
			image[i*2+1] = buf[i] << 4;
			image[i*2+1] = image[i*2+1] >> 4;
		}
	} else {
    delete [] mask;
    delete [] mask_buf;
    delete [] image;
    delete [] buf;

		ico_error_code = icoFileFormatError;

    std::cerr << "Monochrome image" << std::endl;

		return 0;
	}

	/* Flip the image over */
	k=0;
	for (i=0; i<(int)height; i++) {
		k=(width * height) - (width * (i+1));
		for(j=0; j<(int)width; j++) {
			data[k+j] = image[(i*width)+j];
		}
	}

	/* Read transparency mask */
	sz = mask_bytes_per_line * height;
	if (!stream.read((char *)mask_buf, sz)) {
		return 0;
	}

	/* Normalize to 1 bpp */
	for (i=0; i<(int)(mask_bytes_per_line*height); i++) {
		uint8_t b = 0;
		for (j=0; j<8; j++) {
			b = mask_buf[i] << j;
			b = b >> 7;
			mask[i*8+j] = b;
		}
	}

	/* Flip the mask over */
	k=0;
	for (i=0; i<(int)height; i++) {
		k=(width * height) - (width * (i+1));
		for(j=0; j<(int)width; j++) {
			mask_data[k+j] = mask[(i*width)+j];
		}
	}

  delete [] mask;
  delete [] mask_buf;
  delete [] image;
  delete [] buf;

	return 1;
}

/*
   read_uint8_t()
	Wrapper to fread.  Endian-ness is not an issue for a single uint8_t,
	but I wanted to make reading uniform in interface.
*/
static int read_uint8_t(std::istream &stream, uint8_t* b) {
	if (!stream.read((char *)b, 1)) {
		return 0;
	}

	return 1;
}

/*
   read_uint16_t()
	Reads a little endian uint16_t and stores it in proper big endian.
*/
static int read_uint16_t(std::istream &stream, uint16_t* w) {
	uint8_t buf[2];

	#ifndef _BIG_ENDIAN
		if (!stream.read((char *)w, 2)) {
			return 0;
		}

		return 1;
	#endif

	/* read LSB */
	if (!stream.read((char *)&buf[0], 1)) {
		return 0;
	}

	/* read MSB */
	if (!stream.read((char *)&buf[1], 1)) {
		return 0;
	}

	/* put MSB in lowest address position and add LSB */
	*w = (buf[1] << 8) + buf[0];

	return 1;
}

/*
   read_double_uint16_t()
	Reads a little endian double uint16_t and stores it in proper big endian.
*/
static int read_double_uint16_t(std::istream &stream, uint32_t* dw) {
	uint8_t buf[4];
	int  i;

	#ifndef _BIG_ENDIAN
		if (!stream.read((char *)dw, 4)) {
			return 0;
		}

		return 1;
	#endif

	/* read 4 bytes from LSB to MSB */
	for (i=0; i<4; i++) {
		if (!stream.read((char *)&buf[i], 1)) {
			return 0;
		}
	}

	/* put bytes in the target in MSB first ordering */
	*dw = (buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + buf[0];

	return 1;
}

/**
   remove_unused_colors()
	Remove colors from the color list that aren't used in the picture.
**/
static int remove_unused_colors(ICOImage* image) {
	int i = 0;
	int j = 0;
	int num_used_colors = 0;
	ICORGBColor* used_colors = nullptr;

	/* flag used colors in original color map */
	for (i=0; i<(int)(image->width*image->height); i++) {
		if (image->colors[image->data[i]].reserved != 1) {
			image->colors[image->data[i]].reserved = 1;
			num_used_colors++;
		}
	}

	/* make space for used colors array */
	used_colors = (ICORGBColor *) malloc(num_used_colors * sizeof(ICORGBColor));
	if (used_colors == nullptr) {
		return 0;
	}

	/* if color is flagged, copy into used color array */
	j = 0;
	for (i=0; i<(int)image->num_colors; i++) {
		if (image->colors[i].reserved == 1) {
			used_colors[j] = image->colors[i];
			used_colors[j].reserved = i;
			j++;
		}
	}
	/* remove old colors array and use used colors array instead */
	free(image->colors);
	image->colors = used_colors;
	image->num_colors = num_used_colors;

	return 1;
}

cairo_surface_t * create_ico_surface_from_stream(std::istream &stream) 
{
	ICOImage *image = new ICOImage;

	if (read_ICO_file(stream, &image) == 0) {
		delete image;

		return nullptr;
	}

	int sw = image->width;
	int sh = image->height;

	cairo_surface_t *surface = cairo_image_surface_create(CAIRO_FORMAT_ARGB32, sw, sh);

	if (surface == nullptr) {
		return nullptr;
	}

	uint8_t *data = cairo_image_surface_get_data(surface);

	if (data == nullptr) {
		return nullptr;
	}

	uint8_t *ptr = (uint8_t *)data;

	for (int i=0; i<sw*sh; i++) {
		ptr[i*4+3] = 0xff;
		ptr[i*4+2] = image->colors[image->data[i]].red;
		ptr[i*4+1] = image->colors[image->data[i]].green;
		ptr[i*4+0] = image->colors[image->data[i]].blue;
	}

	free(image->data);
	free(image->mask);
	free(image->colors);

	free(image);

	cairo_surface_mark_dirty(surface);

	return surface;
}

cairo_surface_t * create_ico_surface_from_data(uint8_t *data, int size)
{
  std::string str(reinterpret_cast<char *>(data), size);
  std::istringstream is(str);
	
  cairo_surface_t *surface = nullptr;

	surface = create_ico_surface_from_stream(is);

	return surface;
}

}

